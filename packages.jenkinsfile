pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ROLES_PATH = '/tmp/ansibleJenkins/ansible/roles'
    }
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['install', 'update', 'delete'],
            description: 'Action √† effectuer sur le r√¥le'
        )
        choice(
            name: 'OS_TYPE',
            choices: ['auto-detect', 'linux', 'windows', 'both'],
            description: 'Type de syst√®me d\'exploitation cible'
        )
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'Windows',
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'Linux'
            ],
            description: 'Serveur cible pour le d√©ploiement'
        )
        // Ce param√®tre sera rempli dynamiquement apr√®s scan
        choice(
            name: 'ANSIBLE_ROLE',
            choices: ['scan-required'],
            description: '‚ö†Ô∏è Lancez d\'abord un scan pour voir les r√¥les disponibles'
        )
        text(
            name: 'EXTRA_VARS',
            defaultValue: '',
            description: 'Variables suppl√©mentaires (format: key=value s√©par√©es par des espaces)'
        )
        booleanParam(
            name: 'SCAN_ROLES_ONLY',
            defaultValue: false,
            description: '‚úÖ Cocher pour scanner uniquement les r√¥les (sans ex√©cution)'
        )
        string(
            name: 'EXCLUDE_ROLES',
            defaultValue: 'test,example,deprecated',
            description: 'R√¥les √† exclure du scan (s√©par√©s par des virgules)'
        )
    }
    
    stages {
        stage('Scan des R√¥les Disponibles') {
            steps {
                script {
                    echo "üîç Scanning roles from ${env.ROLES_PATH}..."
                    
                    def rolesInfo = sh(
                        script: """
                            cd ${env.ROLES_PATH}
                            
                            # Cr√©er un script Python pour analyser les r√¥les
                            cat > /tmp/scan_roles.py << 'PYTHON_EOF'
import os
import json
import yaml
import glob

def scan_roles(roles_path, exclude_list):
    roles_info = {
        'linux': [],
        'windows': [],
        'universal': [],
        'unknown': []
    }
    
    exclude_roles = [role.strip() for role in exclude_list.split(',') if role.strip()]
    
    for role_dir in os.listdir(roles_path):
        role_path = os.path.join(roles_path, role_dir)
        
        if not os.path.isdir(role_path):
            continue
            
        if role_dir in exclude_roles:
            print(f"‚è≠Ô∏è  Excluding role: {role_dir}")
            continue
            
        # Analyser le r√¥le
        role_info = analyze_role(role_path, role_dir)
        
        # Classer par OS
        os_type = determine_os_type(role_path, role_dir)
        roles_info[os_type].append({
            'name': role_dir,
            'path': role_path,
            'os_type': os_type,
            **role_info
        })
    
    return roles_info

def analyze_role(role_path, role_name):
    info = {
        'has_tasks': os.path.exists(os.path.join(role_path, 'tasks', 'main.yml')),
        'has_handlers': os.path.exists(os.path.join(role_path, 'handlers', 'main.yml')),
        'has_vars': os.path.exists(os.path.join(role_path, 'vars', 'main.yml')),
        'has_defaults': os.path.exists(os.path.join(role_path, 'defaults', 'main.yml')),
        'has_templates': os.path.exists(os.path.join(role_path, 'templates')),
        'description': ''
    }
    
    # Lire la description depuis meta/main.yml
    meta_file = os.path.join(role_path, 'meta', 'main.yml')
    if os.path.exists(meta_file):
        try:
            with open(meta_file, 'r') as f:
                meta_data = yaml.safe_load(f)
                if meta_data and 'galaxy_info' in meta_data:
                    info['description'] = meta_data['galaxy_info'].get('description', '')
        except:
            pass
    
    return info

def determine_os_type(role_path, role_name):
    # Mots-cl√©s pour identifier l'OS
    windows_keywords = ['windows', 'win', 'iis', 'powershell', 'chocolatey', 'mssql']
    linux_keywords = ['linux', 'ubuntu', 'centos', 'debian', 'rhel', 'apache', 'nginx', 'mysql']
    
    role_name_lower = role_name.lower()
    
    # V√©rifier le nom du r√¥le
    if any(keyword in role_name_lower for keyword in windows_keywords):
        return 'windows'
    elif any(keyword in role_name_lower for keyword in linux_keywords):
        return 'linux'
    
    # V√©rifier les fichiers tasks
    tasks_file = os.path.join(role_path, 'tasks', 'main.yml')
    if os.path.exists(tasks_file):
        try:
            with open(tasks_file, 'r') as f:
                content = f.read().lower()
                if any(keyword in content for keyword in ['win_', 'windows', 'powershell', 'chocolatey']):
                    return 'windows'
                elif any(keyword in content for keyword in ['apt:', 'yum:', 'systemd:', 'service:']):
                    return 'linux'
        except:
            pass
    
    # V√©rifier les variables par d√©faut
    defaults_file = os.path.join(role_path, 'defaults', 'main.yml')
    if os.path.exists(defaults_file):
        try:
            with open(defaults_file, 'r') as f:
                content = f.read().lower()
                if 'windows' in content or 'win_' in content:
                    return 'windows'
                elif any(keyword in content for keyword in ['linux', 'unix', '/etc/', '/var/']):
                    return 'linux'
        except:
            pass
    
    # Si universell ou inconnu
    universal_indicators = ['common', 'base', 'general', 'universal']
    if any(keyword in role_name_lower for keyword in universal_indicators):
        return 'universal'
    
    return 'unknown'

if __name__ == "__main__":
    import sys
    roles_path = sys.argv[1] if len(sys.argv) > 1 else "."
    exclude_list = sys.argv[2] if len(sys.argv) > 2 else ""
    
    roles_info = scan_roles(roles_path, exclude_list)
    print(json.dumps(roles_info, indent=2))
PYTHON_EOF

                            # Ex√©cuter le scan
                            python3 /tmp/scan_roles.py "${env.ROLES_PATH}" "${params.EXCLUDE_ROLES}"
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Parse JSON results
                    def rolesData = readJSON text: rolesInfo
                    
                    // Stocker dans des variables d'environnement
                    env.SCANNED_ROLES_JSON = rolesInfo
                    
                    // Afficher les r√©sultats
                    echo "üìä R√©sultats du scan des r√¥les:"
                    echo "üêß R√¥les Linux (${rolesData.linux.size()}): ${rolesData.linux.collect{it.name}.join(', ')}"
                    echo "ü™ü R√¥les Windows (${rolesData.windows.size()}): ${rolesData.windows.collect{it.name}.join(', ')}"
                    echo "üåê R√¥les Universels (${rolesData.universal.size()}): ${rolesData.universal.collect{it.name}.join(', ')}"
                    echo "‚ùì R√¥les Non-class√©s (${rolesData.unknown.size()}): ${rolesData.unknown.collect{it.name}.join(', ')}"
                    
                    // Filtrer selon OS_TYPE
                    def availableRoles = []
                    switch(params.OS_TYPE) {
                        case 'linux':
                            availableRoles = rolesData.linux + rolesData.universal
                            break
                        case 'windows':
                            availableRoles = rolesData.windows + rolesData.universal
                            break
                        case 'both':
                            availableRoles = rolesData.linux + rolesData.windows + rolesData.universal
                            break
                        case 'auto-detect':
                            def isWindowsServer = params.TARGET_SERVER.toLowerCase().contains('windows')
                            if (isWindowsServer) {
                                availableRoles = rolesData.windows + rolesData.universal
                            } else {
                                availableRoles = rolesData.linux + rolesData.universal
                            }
                            break
                    }
                    
                    env.AVAILABLE_ROLES = availableRoles.collect{it.name}.join(',')
                    echo "‚úÖ R√¥les disponibles pour ${params.OS_TYPE}: ${env.AVAILABLE_ROLES}"
                    
                    // Si scan uniquement, arr√™ter ici
                    if (params.SCAN_ROLES_ONLY) {
                        echo "üîç Scan termin√©. Utilisez ces informations pour configurer votre build."
                        currentBuild.description = "Scan des r√¥les: ${availableRoles.size()} r√¥les trouv√©s"
                        return
                    }
                }
            }
        }
        
        stage('Validation des Param√®tres') {
            when {
                expression  { !params.SCAN_ROLES_ONLY }
            }
            steps {
                script {
                    echo "Action s√©lectionn√©e: ${params.ACTION}"
                    echo "OS Type: ${params.OS_TYPE}"
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "R√¥le s√©lectionn√©: ${params.ANSIBLE_ROLE}"
                    
                    // V√©rifier que le r√¥le est valide
                    if (params.ANSIBLE_ROLE == 'scan-required') {
                        error("‚ùå Vous devez d'abord faire un scan des r√¥les ou s√©lectionner un r√¥le valide")
                    }
                    
                    def availableRolesList = env.AVAILABLE_ROLES.split(',')
                    if (!availableRolesList.contains(params.ANSIBLE_ROLE)) {
                        error("‚ùå Le r√¥le '${params.ANSIBLE_ROLE}' n'est pas disponible pour l'OS s√©lectionn√©")
                    }
                    
                    // D√©terminer le playbook selon l'action
                    env.SELECTED_PLAYBOOK = "role_${params.ACTION}.yml"
                    echo "Playbook s√©lectionn√©: ${env.SELECTED_PLAYBOOK}"
                }
            }
        }
        
        stage('Ex√©cution du R√¥le Ansible') {
            when {
                expression { !params.SCAN_ROLES_ONLY }
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'ansible-ssh-key-file', variable: 'SSH_PRIVATE_KEY_FILE')]) {
                        sh """
                            chmod 600 \$SSH_PRIVATE_KEY_FILE
                            
                            # Construire les variables extra
                            EXTRA_VARS="target_role=${params.ANSIBLE_ROLE} action=${params.ACTION}"
                            if [ -n "${params.EXTRA_VARS}" ]; then
                                EXTRA_VARS="\$EXTRA_VARS ${params.EXTRA_VARS}"
                            fi
                            
                            # Ex√©cuter le playbook
                            ansible-playbook \\
                                -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \\
                                /tmp/ansibleJenkins/ansible/playbook/\${SELECTED_PLAYBOOK} \\
                                --private-key=\$SSH_PRIVATE_KEY_FILE \\
                                --user=ansible \\
                                --limit=${params.TARGET_SERVER} \\
                                --extra-vars="\$EXTRA_VARS" \\
                                --verbose
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            mail to: 'l.kieran95@gmail.com',
                subject: "Success - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Upgrade done.\n\nVoir: ${env.BUILD_URL}"
        }
        failure {
            mail to: 'l.kieran95@gmail.com',
                subject: "Issue - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Upgrade issue.\n\nVoir les logs: ${env.BUILD_URL}console"
        }
    }
}