pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'Windows',
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'Linux'
            ],
            description: 'Target server for deployment'
        )
        string(
            name: 'PACKAGE_NAME',
            defaultValue: '',
            description: 'Package name to install/uninstall (e.g.: googlechrome, firefox, git)'
        )
        string(
            name: 'PACKAGE_VERSION',
            defaultValue: '',
            description: 'Specific package version (optional - leave empty for latest version)'
        )
        choice(
            name: 'PACKAGE_STATE',
            choices: ['present', 'absent', 'latest'],
            description: 'Desired package state'
        )
        booleanParam(
            name: 'FORCE_INSTALL',
            defaultValue: false,
            description: 'Force installation even if package already exists'
        )
        string(
            name: 'CHOCOLATEY_SOURCE',
            defaultValue: 'https://chocolatey.org/api/v2/',
            description: 'Chocolatey source (repository URL)'
        )
        choice(
            name: 'CHOCOLATEY_TIMEOUT',
            choices: ['1800', '3600', '7200', '10800'],
            description: 'Timeout in seconds (1800=30min, 3600=1h, 7200=2h, 10800=3h)'
        )
        text(
            name: 'PACKAGE_PARAMS',
            defaultValue: '',
            description: 'Additional installation parameters (e.g.: /InstallDir=C:\\MyApp /NoDesktopIcon)'
        )
        text(
            name: 'EXTRA_VARS',
            defaultValue: '',
            description: 'Additional Ansible variables (format: key=value separated by spaces)'
        )
    }
    
    stages {
        stage('Parameter Validation') {
            steps {
                script {
                    echo "üîç Validating Chocolatey parameters..."
                    
                    // Package name validation
                    if (params.PACKAGE_NAME.trim() == '') {
                        error("Package name is required!")
                    }
                    
                    // Windows server validation
                    if (!params.TARGET_SERVER.toLowerCase().contains('windows') && 
                        !params.TARGET_SERVER.contains('all-windows') && 
                        !params.TARGET_SERVER.contains('all-servers')) {
                        echo "Warning: Chocolatey only works on Windows. Selected server: ${params.TARGET_SERVER}"
                    }
                    
                    // Determine playbook based on package state
                    if (params.PACKAGE_STATE == 'present' || params.PACKAGE_STATE == 'latest') {
                        env.SELECTED_PLAYBOOK = 'deploy_package_windows_chocolatey.yml'
                        env.OPERATION_TYPE = 'INSTALL'
                    } else if (params.PACKAGE_STATE == 'absent') {
                        env.SELECTED_PLAYBOOK = 'uninstall_package_windows_chocolatey.yml'
                        env.OPERATION_TYPE = 'UNINSTALL'
                    } else {
                        error("Invalid package state: ${params.PACKAGE_STATE}")
                    }
                    
                    // Set final package state for reporting
                    env.FINAL_PACKAGE_STATE = params.PACKAGE_STATE
                    
                    echo "Parameter summary:"
                    echo "   ‚Ä¢ Package: ${params.PACKAGE_NAME}"
                    echo "   ‚Ä¢ Version: ${params.PACKAGE_VERSION ?: 'Latest'}"
                    echo "   ‚Ä¢ Action: ${params.PACKAGE_STATE}"
                    echo "   ‚Ä¢ Operation: ${env.OPERATION_TYPE}"
                    echo "   ‚Ä¢ Server: ${params.TARGET_SERVER}"
                    echo "   ‚Ä¢ Force: ${params.FORCE_INSTALL}"
                    echo "   ‚Ä¢ Source: ${params.CHOCOLATEY_SOURCE}"
                    echo "   ‚Ä¢ Timeout: ${params.CHOCOLATEY_TIMEOUT}s"
                    echo "   ‚Ä¢ Playbook: ${env.SELECTED_PLAYBOOK}"
                }
            }
        }
        
        stage('Ansible Variables Preparation') {
            steps {
                script {
                    echo "Preparing variables for Ansible..."
                    
                    // Build Ansible variables
                    def ansibleVars = []
                    
                    // Required variables
                    ansibleVars << "package_name=${params.PACKAGE_NAME}"
                    ansibleVars << "package_state=${env.FINAL_PACKAGE_STATE}"
                    ansibleVars << "force_install=${params.FORCE_INSTALL}"
                    ansibleVars << "chocolatey_source=${params.CHOCOLATEY_SOURCE}"
                    ansibleVars << "chocolatey_timeout=${params.CHOCOLATEY_TIMEOUT}"
                    
                    // Optional variables
                    if (params.PACKAGE_VERSION.trim() != '') {
                        ansibleVars << "package_version=${params.PACKAGE_VERSION}"
                    }
                    
                    if (params.PACKAGE_PARAMS.trim() != '') {
                        // Escape parameters for Ansible
                        def escapedParams = params.PACKAGE_PARAMS.replaceAll('"', '\\\\"')
                        ansibleVars << "package_params=\"${escapedParams}\""
                    }
                    
                    // User additional variables
                    if (params.EXTRA_VARS.trim() != '') {
                        ansibleVars << params.EXTRA_VARS
                    }
                    
                    // Store formatted variables
                    env.ANSIBLE_EXTRA_VARS = ansibleVars.join(' ')
                    
                    echo "Generated Ansible variables:"
                    echo "${env.ANSIBLE_EXTRA_VARS}"
                }
            }
        }
        
        stage('Ansible Verification') {
            steps {
                script {
                    // Check that Ansible is installed
                    sh 'ansible --version'
                    
                    // Check that the playbook exists
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "Playbook ${env.SELECTED_PLAYBOOK} not found!"
                            echo "Playbook directory contents:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "Directory not found"
                            exit 1
                        fi
                        
                        echo "Playbook ${env.SELECTED_PLAYBOOK} found"
                        
                        # Check playbook syntax
                        #ansible-playbook --syntax-check /tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}
                    """
                }
            }
        }
        
        stage('Chocolatey Package Manager Execution') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'credentials-id-windows-user-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        // Conditional execution based on package state
                        if (params.PACKAGE_STATE == 'present' || params.PACKAGE_STATE == 'latest') {
                            echo "üöÄ Starting Chocolatey package INSTALLATION..."
                            echo "Package: ${params.PACKAGE_NAME}"
                            echo "Action: ${params.PACKAGE_STATE} (INSTALL)"
                            echo "Server: ${params.TARGET_SERVER}"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            
                            sh '''
                                echo "Executing INSTALLATION playbook..."
                                
                                # Execute Ansible playbook for installation
                                ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e ansible_user="${USERNAME}" \
                                    -e ansible_password="${PASSWORD}" \
                                    -e HOST=${TARGET_SERVER} \
                                    -e "${ANSIBLE_EXTRA_VARS}"
                            '''
                        } else if (params.PACKAGE_STATE == 'absent') {
                            echo "üóëÔ∏è Starting Chocolatey package UNINSTALLATION..."
                            echo "Package: ${params.PACKAGE_NAME}"
                            echo "Action: ${params.PACKAGE_STATE} (UNINSTALL)"
                            echo "Server: ${params.TARGET_SERVER}"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            
                            sh '''
                                echo "Executing UNINSTALLATION playbook..."
                                
                                # Execute Ansible playbook for uninstallation
                                ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e ansible_user="${USERNAME}" \
                                    -e ansible_password="${PASSWORD}" \
                                    -e HOST=${TARGET_SERVER} \
                                    -e "${ANSIBLE_EXTRA_VARS}"
                            '''
                        } else {
                            error("Unsupported package state: ${params.PACKAGE_STATE}")
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Chocolatey package management completed"
            
            // Create detailed report
            script {
                def report = """
                === CHOCOLATEY PACKAGE MANAGER REPORT ===
                Package: ${params.PACKAGE_NAME}
                Version: ${params.PACKAGE_VERSION ?: 'Latest'}
                Final State: ${env.FINAL_PACKAGE_STATE ?: 'Not defined'}
                Operation: ${env.OPERATION_TYPE ?: 'Not defined'}
                Target Server: ${params.TARGET_SERVER}
                Force Installation: ${params.FORCE_INSTALL}
                Chocolatey Source: ${params.CHOCOLATEY_SOURCE}
                Timeout: ${params.CHOCOLATEY_TIMEOUT} seconds
                Package Parameters: ${params.PACKAGE_PARAMS ?: 'None'}
                Extra Variables: ${params.EXTRA_VARS ?: 'None'}
                Ansible Variables: ${env.ANSIBLE_EXTRA_VARS ?: 'Not generated'}
                Playbook: ${env.SELECTED_PLAYBOOK ?: 'Not defined'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Status: ${currentBuild.currentResult}
                ==========================================
                """
                writeFile file: 'chocolatey_package_report.txt', text: report
                archiveArtifacts artifacts: 'chocolatey_package_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Package '${params.PACKAGE_NAME}' ${params.PACKAGE_STATE} completed successfully!"
                
                currentBuild.description = "${env.OPERATION_TYPE} ${params.PACKAGE_NAME} ‚Üí ${params.TARGET_SERVER}"
                
                // Create email body with formatting
                def emailBody = """
                üç´ CHOCOLATEY PACKAGE - SUCCESS

                Package: ${params.PACKAGE_NAME}
                Version: ${params.PACKAGE_VERSION ?: 'Latest'}
                Action: ${params.PACKAGE_STATE} (${env.OPERATION_TYPE})
                Server: ${params.TARGET_SERVER}
                Final State: ${env.FINAL_PACKAGE_STATE ?: 'Not defined'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                üìä Build details: ${env.BUILD_URL}

                Configuration used:
                - Force Installation: ${params.FORCE_INSTALL}
                - Chocolatey Source: ${params.CHOCOLATEY_SOURCE}
                - Timeout: ${params.CHOCOLATEY_TIMEOUT} seconds
                - Package Parameters: ${params.PACKAGE_PARAMS ?: 'None'}
                - Extra Variables: ${params.EXTRA_VARS ?: 'None'}
                - Playbook executed: ${env.SELECTED_PLAYBOOK}

                ‚úÖ The operation completed successfully.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Chocolatey ${env.OPERATION_TYPE} - ${params.PACKAGE_NAME} - Success",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "Failed to manage package '${params.PACKAGE_NAME}'"
                
                currentBuild.description = "${env.OPERATION_TYPE} ${params.PACKAGE_NAME} ‚Üí FAILED"
                
                // Create failure email body
                def emailBody = """
                ‚ùå CHOCOLATEY PACKAGE - FAILURE

                Package: ${params.PACKAGE_NAME}
                Version: ${params.PACKAGE_VERSION ?: 'Latest'}
                Action: ${params.PACKAGE_STATE} (${env.OPERATION_TYPE})
                Server: ${params.TARGET_SERVER}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                Error logs: ${env.BUILD_URL}console

                Configuration used:
                - Force Installation: ${params.FORCE_INSTALL}
                - Chocolatey Source: ${params.CHOCOLATEY_SOURCE}
                - Timeout: ${params.CHOCOLATEY_TIMEOUT} seconds
                - Package Parameters: ${params.PACKAGE_PARAMS ?: 'None'}
                - Extra Variables: ${params.EXTRA_VARS ?: 'None'}
                - Playbook attempted: ${env.SELECTED_PLAYBOOK}

                Ansible variables generated:
                ${env.ANSIBLE_EXTRA_VARS ?: 'Not generated'}

                Please check the logs for more details.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Chocolatey ${env.OPERATION_TYPE} - ${params.PACKAGE_NAME} - Failure",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}