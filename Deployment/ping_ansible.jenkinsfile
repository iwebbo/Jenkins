pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_OS',
            choices: [
                'linux',
                'windows',
                'both'
            ],
            description: 'Syst√®me d\'exploitation cible pour le test de ping'
        )
        
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'all',
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'win-server1',
                'win-server2',
                'ubuntu-server1',
                'centos-server1'
            ],
            description: 'Serveur cible sp√©cifique (optionnel)'
        )
        
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''üîß Niveau de verbosit√© Ansible:
            
            0 = Normal (d√©faut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
        
        booleanParam(
            name: 'GATHER_SYSTEM_INFO',
            defaultValue: true,
            description: 'Collecter les informations syst√®me en plus du ping'
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "=== PARAM√àTRES DE LA PIPELINE ==="
                    echo "OS Cible: ${params.TARGET_OS}"
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}"
                    echo "Infos syst√®me: ${params.GATHER_SYSTEM_INFO}"
                    echo "================================="
                    
                    // D√©terminer le flag de verbosit√©
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosit√©: '${env.ANSIBLE_VERBOSE_FLAG}'"
                    
                    // Validation des param√®tres
                    if (!params.TARGET_OS || params.TARGET_OS == '') {
                        error("Le param√®tre TARGET_OS est requis")
                    }
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    echo "V√©rification de l'installation Ansible..."
                    sh 'ansible --version'
                    
                    // V√©rification de la syntaxe des playbooks selon l'OS cible
                    if (params.TARGET_OS == 'linux' || params.TARGET_OS == 'both') {
                        echo "V√©rification du playbook Linux..."
                        sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/ping_linux.yml"
                    }
                    
                    if (params.TARGET_OS == 'windows' || params.TARGET_OS == 'both') {
                        echo "V√©rification du playbook Windows..."
                        sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/ping_windows.yml"
                    }
                }
            }
        }
        
        stage('Test de ping Linux') {
            when {
                expression { params.TARGET_OS == 'linux' || params.TARGET_OS == 'both' }
            }
            steps {
                script {
                    echo "=== EX√âCUTION DU TEST PING LINUX ==="
                    
                    def verboseFlag = env.ANSIBLE_VERBOSE_FLAG ?: ''
                    def limitFlag = (params.TARGET_SERVER != 'all') ? "--limit ${params.TARGET_SERVER}" : ''
                    def extraVars = params.GATHER_SYSTEM_INFO ? '-e gather_system_info=true' : '-e gather_system_info=false'
                    
                    withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_KEY_FILE')]) {
                        sh """
                            ansible-playbook ${verboseFlag} \
                                -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/ping_linux.yml \
                                ${limitFlag} \
                                ${extraVars}
                        """
                    }
                }
            }
        }
        
        stage('Test de ping Windows') {
            when {
                expression { params.TARGET_OS == 'windows' || params.TARGET_OS == 'both' }
            }
            steps {
                script {
                    echo "=== EX√âCUTION DU TEST PING WINDOWS ==="
                    
                    def verboseFlag = env.ANSIBLE_VERBOSE_FLAG ?: ''
                    def limitFlag = (params.TARGET_SERVER != 'all') ? "--limit ${params.TARGET_SERVER}" : ''
                    def extraVars = params.GATHER_SYSTEM_INFO ? '-e gather_system_info=true' : '-e gather_system_info=false'
                    
                     withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_KEY_FILE')])
                    {
                        sh """
                            ansible-playbook ${verboseFlag} \
                                -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/ping_windows.yml \
                                ${limitFlag} \
                                ${extraVars} 
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Test de connectivit√© Ansible termin√©"
            
            // Cr√©er un rapport d√©taill√©
            script {
                def report = """
                === RAPPORT TEST DE CONNECTIVIT√â ANSIBLE ===
                OS Cible: ${params.TARGET_OS}
                Serveur(s): ${params.TARGET_SERVER}
                Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                Infos Syst√®me: ${params.GATHER_SYSTEM_INFO}
                Playbooks: ${(params.TARGET_OS == 'both') ? 'ping_linux.yml, ping_windows.yml' : 'ping_' + params.TARGET_OS + '.yml'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString ?: 'N/A'}
                ==========================================
                """
                writeFile file: 'ping_test_report.txt', text: report
                archiveArtifacts artifacts: 'ping_test_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Test de connectivit√© '${params.TARGET_OS}' r√©ussi sur '${params.TARGET_SERVER}'"
                
                currentBuild.description = "Ping Test ${params.TARGET_OS} ‚Üí ${params.TARGET_SERVER}"
                
                // Cr√©er le corps de l'email en texte avec formatage
                def emailBody = """
                    üîç ANSIBLE PING TEST - SUCC√àS

                    OS Cible: ${params.TARGET_OS}
                    Serveur(s): ${params.TARGET_SERVER}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Infos Syst√®me: ${params.GATHER_SYSTEM_INFO}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Dur√©e: ${currentBuild.durationString ?: 'N/A'}

                    üìä D√©tails du build: ${env.BUILD_URL}

                    Configuration utilis√©e:
                    - Playbooks: ${(params.TARGET_OS == 'both') ? 'ping_linux.yml, ping_windows.yml' : 'ping_' + params.TARGET_OS + '.yml'}
                    - Collecte infos: ${params.GATHER_SYSTEM_INFO ? 'Activ√©e' : 'D√©sactiv√©e'}

                    ‚úÖ Le test de connectivit√© s'est termin√© avec succ√®s.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Ping Test - ${params.TARGET_OS} - Succ√®s",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "√âchec du test de connectivit√© '${params.TARGET_OS}' sur '${params.TARGET_SERVER}'"
                
                currentBuild.description = "Ping Test ${params.TARGET_OS} ‚Üí √âCHEC"
                
                // Cr√©er le corps de l'email d'√©chec
                def emailBody = """
                    ‚ùå ANSIBLE PING TEST - √âCHEC

                    OS Cible: ${params.TARGET_OS}
                    Serveur(s): ${params.TARGET_SERVER}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Infos Syst√®me: ${params.GATHER_SYSTEM_INFO}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    üîç Logs d'erreur: ${env.BUILD_URL}console

                    Configuration utilis√©e:
                    - Playbooks: ${(params.TARGET_OS == 'both') ? 'ping_linux.yml, ping_windows.yml' : 'ping_' + params.TARGET_OS + '.yml'}

                    Causes possibles:
                    ‚Ä¢ Serveur(s) inaccessible(s) ou √©teint(s)
                    ‚Ä¢ Probl√®me de configuration SSH/WinRM
                    ‚Ä¢ Probl√®me de r√©seau ou firewall
                    ‚Ä¢ Identifiants incorrects

                    ‚ö†Ô∏è Veuillez v√©rifier les logs pour plus de d√©tails.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Ping Test - √âchec - ${params.TARGET_OS}",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}