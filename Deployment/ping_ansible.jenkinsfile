pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_OS',
            choices: [
                'linux',
                'windows',
                'both'
            ],
            description: 'Syst√®me d\'exploitation cible pour le test de ping'
        )
        
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'all',
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'win-server1',
                'win-server2',
                'ubuntu-server1',
                'centos-server1'
            ],
            description: 'Serveur cible sp√©cifique (optionnel)'
        )
        
        booleanParam(
            name: 'VERBOSE_OUTPUT',
            defaultValue: false,
            description: 'Activer la sortie verbose d\'Ansible (-v)'
        )
        
        booleanParam(
            name: 'GATHER_SYSTEM_INFO',
            defaultValue: true,
            description: 'Collecter les informations syst√®me en plus du ping'
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "=== PARAM√àTRES DE LA PIPELINE ==="
                    echo "OS Cible: ${params.TARGET_OS}"
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Mode verbose: ${params.VERBOSE_OUTPUT}"
                    echo "Infos syst√®me: ${params.GATHER_SYSTEM_INFO}"
                    echo "================================="
                    
                    // Validation des param√®tres
                    if (!params.TARGET_OS || params.TARGET_OS == '') {
                        error("Le param√®tre TARGET_OS est requis")
                    }
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    echo "V√©rification de l'installation Ansible..."
                    sh 'ansible --version'
                    
                    // V√©rification de la syntaxe des playbooks selon l'OS cible
                    if (params.TARGET_OS == 'linux' || params.TARGET_OS == 'both') {
                        echo "V√©rification du playbook Linux..."
                        sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/ping_linux.yml"
                    }
                    
                    if (params.TARGET_OS == 'windows' || params.TARGET_OS == 'both') {
                        echo "V√©rification du playbook Windows..."
                        sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/ping_windows.yml"
                    }
                }
            }
        }
        
        stage('Test de ping Linux') {
            when {
                expression { params.TARGET_OS == 'linux' || params.TARGET_OS == 'both' }
            }
            steps {
                script {
                    echo "=== EX√âCUTION DU TEST PING LINUX ==="
                    
                    def verboseFlag = params.VERBOSE_OUTPUT ? '-v' : ''
                    def limitFlag = (params.TARGET_SERVER != 'all') ? "--limit ${params.TARGET_SERVER}" : ''
                    def extraVars = params.GATHER_SYSTEM_INFO ? '-e gather_system_info=true' : '-e gather_system_info=false'
                    
                    withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_KEY_FILE')]) {
                        sh """
                            ansible-playbook ${verboseFlag} \
                                -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/ping_linux.yml \
                                ${limitFlag} \
                                ${extraVars}
                        """
                    }
                }
            }
        }
        
        stage('Test de ping Windows') {
            when {
                expression { params.TARGET_OS == 'windows' || params.TARGET_OS == 'both' }
            }
            steps {
                script {
                    echo "=== EX√âCUTION DU TEST PING WINDOWS ==="
                    
                    def verboseFlag = params.VERBOSE_OUTPUT ? '-v' : ''
                    def limitFlag = (params.TARGET_SERVER != 'all') ? "--limit ${params.TARGET_SERVER}" : ''
                    def extraVars = params.GATHER_SYSTEM_INFO ? '-e gather_system_info=true' : '-e gather_system_info=false'
                    
                     withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_KEY_FILE')])
                    {
                        sh """
                            ansible-playbook ${verboseFlag} \
                                -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/ping_windows.yml \
                                ${limitFlag} \
                                ${extraVars} 
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // =================================================================
                // VARIABLES GLOBALES POUR LE TEST DE PING
                // =================================================================
                
                env.POST_OPERATION_TYPE = 'PING CONNECTIVITY TEST'
                env.POST_TARGET_OS = params.TARGET_OS
                env.POST_TARGET_SERVER = params.TARGET_SERVER
                env.POST_VERBOSE_MODE = params.VERBOSE_OUTPUT.toString()
                env.POST_SYSTEM_INFO = params.GATHER_SYSTEM_INFO.toString()
                
                // Configuration email
                env.POST_EMAIL_RECIPIENT = 'l.kieran95@gmail.com'
                env.POST_EMAIL_SUBJECT_PREFIX = '[Ansible Ping Test]'
                
                // Timestamp de l'ex√©cution
                env.POST_BUILD_TIMESTAMP = new Date().format('yyyy-MM-dd HH:mm:ss')
                
                // D√©terminer les playbooks ex√©cut√©s
                def playbooks_executed = []
                if (params.TARGET_OS == 'linux' || params.TARGET_OS == 'both') {
                    playbooks_executed.add('ping-test-linux.yml')
                }
                if (params.TARGET_OS == 'windows' || params.TARGET_OS == 'both') {
                    playbooks_executed.add('ping-test-windows.yml')
                }
                env.POST_PLAYBOOKS_EXECUTED = playbooks_executed.join(', ')
                
                // =================================================================
                // G√âN√âRATION DU RAPPORT
                // =================================================================
                
                echo "Test de connectivit√© termin√©"
                
                def report = """
                === RAPPORT DE TEST DE CONNECTIVIT√â ===
                Type d'op√©ration: ${env.POST_OPERATION_TYPE}
                OS Cible: ${env.POST_TARGET_OS}
                Serveur(s) cible(s): ${env.POST_TARGET_SERVER}
                Playbook(s) ex√©cut√©(s): ${env.POST_PLAYBOOKS_EXECUTED}
                Mode verbose: ${env.POST_VERBOSE_MODE}
                Infos syst√®me collect√©es: ${env.POST_SYSTEM_INFO}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString}
                
                URL du build: ${env.BUILD_URL}
                Logs console: ${env.BUILD_URL}console
                ==========================================
                """
                
                writeFile file: "ping_test_report.txt", text: report
                archiveArtifacts artifacts: "ping_test_report.txt", allowEmptyArchive: true
                
                // Sauvegarde des logs Ansible si disponibles
                sh '''
                    if [ -f /tmp/ansible.log ]; then
                        cp /tmp/ansible.log ansible_execution.log
                    fi
                '''
                archiveArtifacts artifacts: "ansible_execution.log", allowEmptyArchive: true
            }
        }
        
        success {
            script {
                echo "Test de connectivit√© r√©ussi pour '${env.POST_TARGET_OS}' sur '${env.POST_TARGET_SERVER}'"
                
                // Description du build
                currentBuild.description = "Test ping ${env.POST_TARGET_OS} sur ${env.POST_TARGET_SERVER} - R√©ussi"
                
                // Emoji selon l'OS
                def osEmoji = ''
                switch(env.POST_TARGET_OS) {
                    case 'linux':
                        osEmoji = 'üêß'
                        break
                    case 'windows':
                        osEmoji = 'ü™ü'
                        break
                    case 'both':
                        osEmoji = 'üêßü™ü'
                        break
                    default:
                        osEmoji = 'üñ•Ô∏è'
                }
                
                // Corps de l'email de succ√®s
                def emailBody = """
                ${osEmoji} TEST DE CONNECTIVIT√â - SUCC√àS

                Type de test: Test de ping Ansible
                OS Cible: ${env.POST_TARGET_OS}
                Serveur(s): ${env.POST_TARGET_SERVER}
                Playbook(s): ${env.POST_PLAYBOOKS_EXECUTED}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Dur√©e: ${currentBuild.durationString}

                üìä D√©tails du build: ${env.BUILD_URL}

                ‚úÖ Tous les tests de connectivit√© se sont termin√©s avec succ√®s.
                
                ${env.POST_TARGET_OS == 'both' ? 'Les serveurs Linux et Windows' : 'Le(s) serveur(s) ' + env.POST_TARGET_OS} 
                sont accessibles et r√©pondent correctement aux requ√™tes Ansible.
                
                ${env.POST_SYSTEM_INFO == 'true' ? 'üìã Les informations syst√®me ont √©t√© collect√©es avec succ√®s.' : ''}
                """
                
                mail to: env.POST_EMAIL_RECIPIENT,
                    subject: "${env.POST_EMAIL_SUBJECT_PREFIX} ${env.POST_TARGET_OS.toUpperCase()} - Succ√®s",
                    body: emailBody
            }
        }
        
        failure {
            script {
                echo "√âchec du test de connectivit√© pour '${env.POST_TARGET_OS}' sur '${env.POST_TARGET_SERVER}'"
                
                // Description du build
                currentBuild.description = "Test ping ${env.POST_TARGET_OS} sur ${env.POST_TARGET_SERVER} - √âCHEC"
                
                // Emoji selon l'OS
                def osEmoji = ''
                switch(env.POST_TARGET_OS) {
                    case 'linux':
                        osEmoji = 'üêß'
                        break
                    case 'windows':
                        osEmoji = 'ü™ü'
                        break
                    case 'both':
                        osEmoji = 'üêßü™ü'
                        break
                    default:
                        osEmoji = 'üñ•Ô∏è'
                }
                
                // Corps de l'email d'√©chec
                def emailBody = """
                ${osEmoji} TEST DE CONNECTIVIT√â - √âCHEC

                Type de test: Test de ping Ansible
                OS Cible: ${env.POST_TARGET_OS}
                Serveur(s): ${env.POST_TARGET_SERVER}
                Playbook(s): ${env.POST_PLAYBOOKS_EXECUTED}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Dur√©e: ${currentBuild.durationString}

                üîç Logs d'erreur: ${env.BUILD_URL}console

                ‚ùå Le test de connectivit√© a √©chou√©.

                Causes possibles:
                ‚Ä¢ Serveur(s) inaccessible(s) ou √©teint(s)
                ‚Ä¢ Probl√®me de configuration SSH/WinRM
                ‚Ä¢ Probl√®me de r√©seau ou firewall
                ‚Ä¢ Identifiants incorrects
                ‚Ä¢ Configuration Ansible incorrecte

                Serveur(s) concern√©(s): ${env.POST_TARGET_SERVER}
                OS: ${env.POST_TARGET_OS}
                
                Veuillez v√©rifier les logs pour plus de d√©tails.
                """
                
                mail to: env.POST_EMAIL_RECIPIENT,
                    subject: "${env.POST_EMAIL_SUBJECT_PREFIX} ${env.POST_TARGET_OS.toUpperCase()} - √âchec",
                    body: emailBody
            }
        }
        
        unstable {
            script {
                echo "Test de connectivit√© instable pour '${env.POST_TARGET_OS}' sur '${env.POST_TARGET_SERVER}'"
                
                currentBuild.description = "Test ping ${env.POST_TARGET_OS} sur ${env.POST_TARGET_SERVER} - Instable"
                
                def emailBody = """
                ‚ö†Ô∏è TEST DE CONNECTIVIT√â - INSTABLE

                OS Cible: ${env.POST_TARGET_OS}
                Serveur(s): ${env.POST_TARGET_SERVER}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}

                üîç Logs: ${env.BUILD_URL}console

                ‚ö†Ô∏è Certains serveurs ne sont pas accessibles, mais d'autres ont r√©pondu correctement.
                
                Veuillez v√©rifier l'√©tat de tous vos serveurs.
                """
                
                mail to: env.POST_EMAIL_RECIPIENT,
                    subject: "${env.POST_EMAIL_SUBJECT_PREFIX} ${env.POST_TARGET_OS.toUpperCase()} - Instable",
                    body: emailBody
            }
        }
        
        cleanup {
            cleanWs()
        }
    }
}