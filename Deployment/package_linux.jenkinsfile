pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'Linux'
            ],
            description: 'Serveur cible pour l\'installation du package'
        )
        
        string(
            name: 'PACKAGE_NAME',
            defaultValue: '',
            description: 'üì¶ Nom du package √† installer (ex: nginx, docker.io, python3)'
        )
        
        string(
            name: 'PACKAGE_VERSION',
            defaultValue: '',
            description: 'üî¢ Version sp√©cifique du package (optionnel, laisser vide pour la derni√®re version)'
        )
        
        choice(
            name: 'PACKAGE_STATE',
            choices: [
                'present',
                'latest', 
                'absent'
            ],
            description: '''üìã Action √† effectuer:
            
            present = Installer si absent
            latest = Installer/Mettre √† jour vers la derni√®re version
            absent = D√©sinstaller le package'''
        )
        
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''üîß Niveau de verbosit√© Ansible:
            
            0 = Normal (d√©faut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    // D√©finir le playbook √† utiliser
                    env.SELECTED_PLAYBOOK = 'deploy_package_linux.yml'
                    echo "Playbook s√©lectionn√©: ${env.SELECTED_PLAYBOOK}"
                    
                    echo "üîç Validation des param√®tres de gestion de packages..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Package: ${params.PACKAGE_NAME}"
                    echo "Version: ${params.PACKAGE_VERSION ?: 'latest'}"
                    echo "Action: ${params.PACKAGE_STATE}"
                    echo "Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}"
                    
                    // Validation du nom de package
                    if (!params.PACKAGE_NAME || params.PACKAGE_NAME.trim() == '') {
                        error("‚ùå Le nom du package est obligatoire !")
                    }
                    
                    // D√©terminer le flag de verbosit√©
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosit√©: '${env.ANSIBLE_VERBOSE_FLAG}'"
                    
                    // D√©finir la description du build
                    def action = params.PACKAGE_STATE == 'absent' ? 'D√©sinstallation' : 'Installation'
                    currentBuild.description = "${action} de ${params.PACKAGE_NAME} ‚Üí ${params.TARGET_SERVER}"
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    echo "üîß V√©rification de l'environnement Ansible..."
                    
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier la syntaxe du playbook
                    sh """
                        ansible-playbook --syntax-check \
                            -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                            -e HOST=${TARGET_SERVER} \
                            /tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}
                    """
                    
                    // V√©rifier la connectivit√© avec le serveur cible
                    echo "üîó Test de connectivit√© avec ${params.TARGET_SERVER}..."
                    sh """
                        ansible ${params.TARGET_SERVER} \
                            -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                            -m ping
                    """
                }
            }
        }
        
        stage('Ex√©cution du Playbook') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
                        echo "üöÄ D√©marrage de la gestion du package..."
                        echo "Serveur: ${params.TARGET_SERVER}"
                        echo "Package: ${params.PACKAGE_NAME}"
                        echo "Version: ${params.PACKAGE_VERSION ?: 'latest'}"
                        echo "Action: ${params.PACKAGE_STATE}"
                        echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                        
                        // Construire les variables extra
                        def extraVars = [
                            "HOST=${params.TARGET_SERVER}",
                            "package_name=${params.PACKAGE_NAME}",
                            "package_state=${params.PACKAGE_STATE}"
                        ]
                        
                        // Ajouter la version si sp√©cifi√©e
                        if (params.PACKAGE_VERSION && params.PACKAGE_VERSION.trim() != '') {
                            extraVars.add("package_version=${params.PACKAGE_VERSION}")
                        }
                        
                        def extraVarsString = extraVars.join(' -e ')
                        
                        sh """
                            ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK} \
                                -e ansible_ssh_private_key_file="${SSH_KEY_FILE}" \
                                -e ${extraVarsString} \
                                ${env.ANSIBLE_VERBOSE_FLAG}
                        """
                    }
                }
            }
        }
        
        stage('V√©rification post-installation') {
            when {
                expression { params.PACKAGE_STATE != 'absent' }
            }
            steps {
                script {
                    echo "‚úÖ V√©rification de l'installation du package..."
                    
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
                        sh """
                            ansible ${params.TARGET_SERVER} \
                                -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                -e  ansible_ssh_private_key_file="${SSH_KEY_FILE}" \
                                -m shell \
                                -a "which ${params.PACKAGE_NAME} || echo 'Package ${params.PACKAGE_NAME} command not found in PATH'"
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def action = params.PACKAGE_STATE == 'absent' ? 'd√©sinstallation' : 'installation'
                echo "Gestion de package termin√©e (${action})"
                
                // Cr√©er un rapport d√©taill√©
                def report = """
                === RAPPORT DE GESTION DE PACKAGE ===
                Serveur Cible: ${params.TARGET_SERVER}
                Package: ${params.PACKAGE_NAME}
                Version: ${params.PACKAGE_VERSION ?: 'latest'}
                Action: ${params.PACKAGE_STATE}
                Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                Playbook: ${env.SELECTED_PLAYBOOK}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString ?: 'N/A'}
                =========================================
                """
                writeFile file: 'package_management_report.txt', text: report
                archiveArtifacts artifacts: 'package_management_report.txt', allowEmptyArchive: true
            }
        }
        
        success {
            script {
                def action = params.PACKAGE_STATE == 'absent' ? 'd√©sinstallation' : 'installation'
                def actionEmoji = params.PACKAGE_STATE == 'absent' ? 'üóëÔ∏è' : 'üì¶'
                
                echo "${action.capitalize()} du package '${params.PACKAGE_NAME}' r√©ussie sur '${params.TARGET_SERVER}'"
                
                // Cr√©er le corps de l'email de succ√®s
                def emailBody = """
                    ${actionEmoji} GESTION DE PACKAGE - SUCC√àS

                    Serveur: ${params.TARGET_SERVER}
                    Package: ${params.PACKAGE_NAME}
                    Version: ${params.PACKAGE_VERSION ?: 'latest'}
                    Action: ${params.PACKAGE_STATE}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Dur√©e: ${currentBuild.durationString ?: 'N/A'}

                    üìä D√©tails du build: ${env.BUILD_URL}

                    Configuration utilis√©e:
                    - Type d'op√©ration: ${action.capitalize()} de package
                    - Flag de verbosit√©: ${env.ANSIBLE_VERBOSE_FLAG ?: 'Aucun'}

                    ‚úÖ La ${action} du package s'est termin√©e avec succ√®s.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] ${action.capitalize()} package - ${params.PACKAGE_NAME} sur ${params.TARGET_SERVER} - Succ√®s",
                    body: emailBody
            }
        }
        
        failure {
            script {
                def action = params.PACKAGE_STATE == 'absent' ? 'd√©sinstallation' : 'installation'
                echo "√âchec de la ${action} du package '${params.PACKAGE_NAME}' sur '${params.TARGET_SERVER}'"
                
                // Cr√©er le corps de l'email d'√©chec
                def emailBody = """
                    ‚ùå GESTION DE PACKAGE - √âCHEC

                    Serveur: ${params.TARGET_SERVER}
                    Package: ${params.PACKAGE_NAME}
                    Version: ${params.PACKAGE_VERSION ?: 'latest'}
                    Action: ${params.PACKAGE_STATE}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    üîç Logs d'erreur: ${env.BUILD_URL}console

                    Configuration utilis√©e:
                    - Type d'op√©ration: ${action.capitalize()} de package
                    - Flag de verbosit√©: ${env.ANSIBLE_VERBOSE_FLAG ?: 'Aucun'}

                    ‚ö†Ô∏è Veuillez v√©rifier les logs pour plus de d√©tails.
                    
                    üí° Causes possibles:
                    - Package inexistant dans les d√©p√¥ts
                    - Version sp√©cifi√©e introuvable
                    - Probl√®me de connectivit√© r√©seau
                    - Permissions insuffisantes
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] √âchec ${action} package - ${params.PACKAGE_NAME} sur ${params.TARGET_SERVER}",
                    body: emailBody
            }
        }
        
        cleanup {
            cleanWs()
        }
    }
}