def getEnvironments() {
    def ECOSYSTEM = "APPNAME" 
    def ecosystemLower = ECOSYSTEM.toLowerCase() 
    
    def jenkinsUrl = env.JENKINS_URL ?: ""
    def jobUrl = env.JOB_URL ?: ""
    
    echo "DEBUG - Jenkins URL: ${jenkinsUrl}"
    echo "DEBUG - Job URL: ${jobUrl}"
    echo "DEBUG - ECOSYSTEM: ${ECOSYSTEM} (lower: ${ecosystemLower})"
    
    if (jobUrl.contains("${ecosystemLower}-dev-${ecosystemLower}")) {
        echo "Environnement d√©tect√©: DEV"
        return ["DEV"]
    }
    if (jobUrl.contains("${ecosystemLower}-aps-${ecosystemLower}")) {
        echo "Environnement d√©tect√©: STG/PRD"
        return ["STG", "PRD"]
    }
}

pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: getEnvironments(),
            description: 'Environnement de d√©ploiement'
        )
    }
    
    stages {
        stage('Display Parameters') {
            steps {
                script {
                    def ECOSYSTEM = "APPNAME"  
                    def ecosystemLower = ECOSYSTEM.toLowerCase()
                    
                    echo "=== INFORMATIONS DE BUILD ==="
                    echo "√âcosyst√®me (fixe): ${ECOSYSTEM}"
                    echo "√âcosyst√®me (URLs): ${ecosystemLower}"
                    echo "Environnement s√©lectionn√©: ${params.ENVIRONMENT}"
                    echo "Jenkins URL: ${env.JENKINS_URL}"
                    echo "Job URL: ${env.JOB_URL}"
                    
                    def availableEnvs = getEnvironments()
                    echo "Environnements disponibles: ${availableEnvs.join(', ')}"
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    def ECOSYSTEM = "APPNAME"  // M√™me valeur (MAJUSCULES)
                    def ecosystemLower = ECOSYSTEM.toLowerCase()
                    
                    echo "üöÄ D√©ploiement en cours..."
                    echo "Application: ${ECOSYSTEM}"
                    echo "Environnement cible: ${params.ENVIRONMENT}"
                    
                    // Logique sp√©cifique par environnement
                    switch(params.ENVIRONMENT) {
                        case 'DEV':
                            echo "D√©ploiement sur DEV - Tests automatiques"
                            echo "URL pattern: jenkins/${ecosystemLower}-dev-${ecosystemLower}/job/DEV/"
                            break
                        case 'STG':
                            echo "D√©ploiement sur STG - Tests d'int√©gration"
                            echo "URL pattern: jenkins/${ecosystemLower}-aps-${ecosystemLower}/job/STG/"
                            break
                        case 'PRD':
                            echo "D√©ploiement sur PRODUCTION - Mode s√©curis√©"
                            echo "URL pattern: jenkins/${ecosystemLower}-aps-${ecosystemLower}/job/PRD/"
                            break
                        default:
                            echo "Environnement non reconnu: ${params.ENVIRONMENT}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def ECOSYSTEM = "APPNAME"
                echo "Fin du d√©ploiement pour ${ECOSYSTEM} sur ${params.ENVIRONMENT}"
            }
        }
    }
}