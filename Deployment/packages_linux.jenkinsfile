pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'Linux',
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'all-linux',
                'debian-servers',
                'redhat-servers'
            ],
            description: 'Target server for deployment'
        )
        string(
            name: 'PACKAGE_NAME',
            defaultValue: '',
            description: 'Package name to install/uninstall (e.g.: nginx, docker.io, git)'
        )
        string(
            name: 'PACKAGE_VERSION',
            defaultValue: '',
            description: 'Specific package version (optional - leave empty for latest version)'
        )
        choice(
            name: 'PACKAGE_STATE',
            choices: ['present', 'absent', 'latest'],
            description: 'Desired package state'
        )
        booleanParam(
            name: 'UPDATE_CACHE',
            defaultValue: true,
            description: 'Update package cache before installation (recommended)'
        )
        string(
            name: 'CACHE_VALID_TIME',
            defaultValue: '3600',
            description: 'Cache valid time in seconds (3600=1h)'
        )
        text(
            name: 'EXTRA_VARS',
            defaultValue: '',
            description: 'Additional Ansible variables (format: key=value separated by spaces)'
        )
    }
    
    stages {
        stage('Parameter Validation') {
            steps {
                script {
                    echo "üîç Validating Linux package parameters..."
                    
                    // Package name validation
                    if (params.PACKAGE_NAME.trim() == '') {
                        error("Package name is required!")
                    }
                    
                    // Determine operation type based on package state
                    if (params.PACKAGE_STATE == 'present' || params.PACKAGE_STATE == 'latest') {
                        env.OPERATION_TYPE = 'INSTALL'
                    } else if (params.PACKAGE_STATE == 'absent') {
                        env.OPERATION_TYPE = 'UNINSTALL'
                    } else {
                        error("Invalid package state: ${params.PACKAGE_STATE}")
                    }
                    
                    // Set playbook (using the package_manager role)
                    env.SELECTED_PLAYBOOK = 'deploy_package_linux.yml'
                    
                    // Set final package state for reporting
                    env.FINAL_PACKAGE_STATE = params.PACKAGE_STATE
                    
                    echo "Parameter summary:"
                    echo "   ‚Ä¢ Package: ${params.PACKAGE_NAME}"
                    echo "   ‚Ä¢ Version: ${params.PACKAGE_VERSION ?: 'Latest'}"
                    echo "   ‚Ä¢ Action: ${params.PACKAGE_STATE}"
                    echo "   ‚Ä¢ Operation: ${env.OPERATION_TYPE}"
                    echo "   ‚Ä¢ Server: ${params.TARGET_SERVER}"
                    echo "   ‚Ä¢ Update Cache: ${params.UPDATE_CACHE}"
                    echo "   ‚Ä¢ Cache Valid Time: ${params.CACHE_VALID_TIME}s"
                    echo "   ‚Ä¢ Playbook: ${env.SELECTED_PLAYBOOK}"
                }
            }
        }
        
        stage('Ansible Verification') {
            steps {
                script {
                    // Check that Ansible is installed
                    sh 'ansible --version'
                    
                    // Check that the playbook exists
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "Playbook ${env.SELECTED_PLAYBOOK} not found!"
                            echo "Playbook directory contents:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "Directory not found"
                            exit 1
                        fi
                        
                        echo "Playbook ${env.SELECTED_PLAYBOOK} found"
                    """
                }
            }
        }
        
        stage('Linux Package Manager Execution') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_PRIVATE_KEY_FILE')]) {
                        echo "üöÄ Starting Linux package ${env.OPERATION_TYPE}..."
                        echo "Package: ${params.PACKAGE_NAME}"
                        echo "Action: ${params.PACKAGE_STATE} (${env.OPERATION_TYPE})"
                        echo "Server: ${params.TARGET_SERVER}"
                        echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                        
                        sh '''
                            
                            echo "Executing Linux package management playbook..."
                            
                            # Build ansible command with required variables
                            ANSIBLE_CMD="ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                -e host=${TARGET_SERVER} \
                                -e package_name=${PACKAGE_NAME} \
                                -e package_state=${PACKAGE_STATE}"
                            
                            # Add optional package version if provided
                            if [ -n "${PACKAGE_VERSION}" ]; then
                                ANSIBLE_CMD="${ANSIBLE_CMD} -e package_version=${PACKAGE_VERSION}"
                            fi
                            
                            # Add cache settings
                            ANSIBLE_CMD="${ANSIBLE_CMD} -e update_cache=${UPDATE_CACHE}"
                            ANSIBLE_CMD="${ANSIBLE_CMD} -e cache_valid_time=${CACHE_VALID_TIME}"
                            
                            # Add extra variables if provided
                            if [ -n "${EXTRA_VARS}" ]; then
                                ANSIBLE_CMD="${ANSIBLE_CMD} -e ${EXTRA_VARS}"
                            fi
                            
                            echo "Executing command: ${ANSIBLE_CMD}"
                            eval ${ANSIBLE_CMD}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Linux package management completed"
            
            // Create detailed report
            script {
                def report = """
                === LINUX PACKAGE MANAGER REPORT ===
                Package: ${params.PACKAGE_NAME}
                Version: ${params.PACKAGE_VERSION ?: 'Latest'}
                Final State: ${env.FINAL_PACKAGE_STATE ?: 'Not defined'}
                Operation: ${env.OPERATION_TYPE ?: 'Not defined'}
                Target Server: ${params.TARGET_SERVER}
                Update Cache: ${params.UPDATE_CACHE}
                Cache Valid Time: ${params.CACHE_VALID_TIME} seconds
                Extra Variables: ${params.EXTRA_VARS ?: 'None'}
                Playbook: ${env.SELECTED_PLAYBOOK ?: 'Not defined'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Status: ${currentBuild.currentResult}
                =====================================
                """
                writeFile file: 'linux_package_report.txt', text: report
                archiveArtifacts artifacts: 'linux_package_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Package '${params.PACKAGE_NAME}' ${params.PACKAGE_STATE} completed successfully!"
                
                currentBuild.description = "${env.OPERATION_TYPE} ${params.PACKAGE_NAME} ‚Üí ${params.TARGET_SERVER}"
                
                // Create email body with formatting
                def emailBody = """
                üêß LINUX PACKAGE MANAGER - SUCCESS

                Package: ${params.PACKAGE_NAME}
                Version: ${params.PACKAGE_VERSION ?: 'Latest'}
                Action: ${params.PACKAGE_STATE} (${env.OPERATION_TYPE})
                Server: ${params.TARGET_SERVER}
                Final State: ${env.FINAL_PACKAGE_STATE ?: 'Not defined'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                üìä Build details: ${env.BUILD_URL}

                Configuration used:
                - Update Cache: ${params.UPDATE_CACHE}
                - Cache Valid Time: ${params.CACHE_VALID_TIME} seconds
                - Extra Variables: ${params.EXTRA_VARS ?: 'None'}
                - Playbook executed: ${env.SELECTED_PLAYBOOK}

                ‚úÖ The operation completed successfully.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Linux Package ${env.OPERATION_TYPE} - ${params.PACKAGE_NAME} - Success",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "Failed to manage package '${params.PACKAGE_NAME}'"
                
                currentBuild.description = "${env.OPERATION_TYPE} ${params.PACKAGE_NAME} ‚Üí FAILED"
                
                // Create failure email body
                def emailBody = """
                ‚ùå LINUX PACKAGE MANAGER - FAILURE

                Package: ${params.PACKAGE_NAME}
                Version: ${params.PACKAGE_VERSION ?: 'Latest'}
                Action: ${params.PACKAGE_STATE} (${env.OPERATION_TYPE})
                Server: ${params.TARGET_SERVER}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                Error logs: ${env.BUILD_URL}console

                Configuration used:
                - Update Cache: ${params.UPDATE_CACHE}
                - Cache Valid Time: ${params.CACHE_VALID_TIME} seconds
                - Extra Variables: ${params.EXTRA_VARS ?: 'None'}
                - Playbook attempted: ${env.SELECTED_PLAYBOOK}

                Please check the logs for more details.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Linux Package ${env.OPERATION_TYPE} - ${params.PACKAGE_NAME} - Failure",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}