pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'Linux'
            ],
            description: 'Target server for deployment'
        )
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''üîß Niveau de verbosit√© Ansible:
            
            0 = Normal (d√©faut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "üîç Validation des param√®tres de mise √† jour syst√®me..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}"
                    
                    // D√©terminer le flag de verbosit√©
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosit√©: '${env.ANSIBLE_VERBOSE_FLAG}'"
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier la syntaxe du playbook
                    // sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/update_system_linux.yml"
                }
            }
        }
        
        stage('Ex√©cution du Playbook') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_KEY_FILE')]) {
                        echo "üöÄ D√©marrage de la mise √† jour syst√®me..."
                        echo "Serveur: ${params.TARGET_SERVER}"
                        echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                        
                        sh '''
                            ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/update_system_linux.yml \
                                -e HOST=${TARGET_SERVER} \
                                ${ANSIBLE_VERBOSE_FLAG}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Mise √† jour syst√®me termin√©e"
            
            // Cr√©er un rapport d√©taill√©
            script {
                def report = """
                === RAPPORT DE MISE √Ä JOUR SYST√àME ===
                Serveur Cible: ${params.TARGET_SERVER}
                Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                Playbook: update_system_linux.yml
                Inventaire: /tmp/ansibleJenkins/ansible/inventory/hosts.ini
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString ?: 'N/A'}
                ==========================================
                """
                writeFile file: 'system_update_report.txt', text: report
                archiveArtifacts artifacts: 'system_update_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Mise √† jour syst√®me r√©ussie sur '${params.TARGET_SERVER}'"
                
                currentBuild.description = "Mise √† jour syst√®me ‚Üí ${params.TARGET_SERVER}"
                
                // Cr√©er le corps de l'email en texte avec formatage
                def emailBody = """
                    üöÄ MISE √Ä JOUR SYST√àME - SUCC√àS

                    Serveur: ${params.TARGET_SERVER}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Playbook: update_system_linux.yml
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Dur√©e: ${currentBuild.durationString ?: 'N/A'}

                    üìä D√©tails du build: ${env.BUILD_URL}

                    Configuration utilis√©e:
                    - Inventaire: /tmp/ansibleJenkins/ansible/inventory/hosts.ini
                    - Type d'op√©ration: Mise √† jour syst√®me compl√®te
                    - Flag de verbosit√©: ${env.ANSIBLE_VERBOSE_FLAG ?: 'Aucun'}

                    ‚úÖ La mise √† jour syst√®me s'est termin√©e avec succ√®s.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Mise √† jour syst√®me - ${params.TARGET_SERVER} - Succ√®s",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "√âchec de la mise √† jour syst√®me sur '${params.TARGET_SERVER}'"
                
                currentBuild.description = "Mise √† jour syst√®me ‚Üí √âCHEC"
                
                // Cr√©er le corps de l'email d'√©chec
                def emailBody = """
                    ‚ùå MISE √Ä JOUR SYST√àME - √âCHEC

                    Serveur: ${params.TARGET_SERVER}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Playbook: update_system_linux.yml
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    üîç Logs d'erreur: ${env.BUILD_URL}console

                    Configuration utilis√©e:
                    - Inventaire: /tmp/ansibleJenkins/ansible/inventory/hosts.ini
                    - Type d'op√©ration: Mise √† jour syst√®me compl√®te
                    - Flag de verbosit√©: ${env.ANSIBLE_VERBOSE_FLAG ?: 'Aucun'}

                    ‚ö†Ô∏è Veuillez v√©rifier les logs pour plus de d√©tails.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Mise √† jour syst√®me - √âchec - ${params.TARGET_SERVER}",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}