pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'Linux'
            ],
            description: 'Target server for deployment'
        )
    }
    
    stages {
        stage('V√©rification Ansible') {
            steps {
                script {
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier la syntaxe du playbook
                    // sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/update_system_linux.yml"
                }
            }
        }
        
        stage('Ex√©cution du Playbook') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_KEY_FILE')]) {
                        sh '''
                            ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/update_system_linux.yml -e HOST=${TARGET_SERVER}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // =================================================================
                // VARIABLES GLOBALES POUR LA MISE √Ä JOUR SYST√àME
                // =================================================================
                
                env.POST_OPERATION_TYPE = 'SYSTEM UPDATE'
                env.POST_TARGET_SERVER = params.TARGET_SERVER
                env.POST_PLAYBOOK_NAME = 'update_system_linux.yml'
                env.POST_ANSIBLE_INVENTORY = '/tmp/ansibleJenkins/ansible/inventory/hosts.ini'
                
                // Configuration email
                env.POST_EMAIL_RECIPIENT = 'l.kieran95@gmail.com'
                env.POST_EMAIL_SUBJECT_PREFIX = '[Ansible System Update]'
                
                // Timestamp de l'ex√©cution
                env.POST_BUILD_TIMESTAMP = new Date().format('yyyy-MM-dd HH:mm:ss')
                
                // =================================================================
                // G√âN√âRATION DU RAPPORT
                // =================================================================
                
                echo "Mise √† jour syst√®me termin√©e"
                
                def report = """
                === RAPPORT DE MISE √Ä JOUR SYST√àME ===
                Serveur cible: ${env.POST_TARGET_SERVER}
                Playbook: ${env.POST_PLAYBOOK_NAME}
                Inventaire: ${env.POST_ANSIBLE_INVENTORY}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString}
                
                URL du build: ${env.BUILD_URL}
                Logs console: ${env.BUILD_URL}console
                ==========================================
                """
                
                writeFile file: "system_update_report.txt", text: report
                archiveArtifacts artifacts: "system_update_report.txt", allowEmptyArchive: true
            }
        }
        
        success {
            script {
                echo "Mise √† jour syst√®me r√©ussie sur '${env.POST_TARGET_SERVER}'"
                
                // Description du build
                currentBuild.description = "Mise √† jour syst√®me sur ${env.POST_TARGET_SERVER} - R√©ussie"
                
                // Corps de l'email de succ√®s
                def emailBody = """
                üöÄ MISE √Ä JOUR SYST√àME - SUCC√àS

                Serveur cible: ${env.POST_TARGET_SERVER}
                Playbook ex√©cut√©: ${env.POST_PLAYBOOK_NAME}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Dur√©e: ${currentBuild.durationString}

                üìä D√©tails du build: ${env.BUILD_URL}

                ‚úÖ La mise √† jour syst√®me s'est termin√©e avec succ√®s.
                
                Le serveur ${env.POST_TARGET_SERVER} a √©t√© mis √† jour et est maintenant pr√™t.
                """
                
                mail to: env.POST_EMAIL_RECIPIENT,
                    subject: "${env.POST_EMAIL_SUBJECT_PREFIX} ${env.POST_TARGET_SERVER} - Succ√®s",
                    body: emailBody
            }
        }
        
        failure {
            script {
                echo "√âchec de la mise √† jour syst√®me sur '${env.POST_TARGET_SERVER}'"
                
                // Description du build
                currentBuild.description = "Mise √† jour syst√®me sur ${env.POST_TARGET_SERVER} - √âCHEC"
                
                // Corps de l'email d'√©chec
                def emailBody = """
                ‚ùå MISE √Ä JOUR SYST√àME - √âCHEC

                Serveur cible: ${env.POST_TARGET_SERVER}
                Playbook: ${env.POST_PLAYBOOK_NAME}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Dur√©e: ${currentBuild.durationString}

                üîç Logs d'erreur: ${env.BUILD_URL}console

                ‚ö†Ô∏è La mise √† jour syst√®me a √©chou√©. Veuillez v√©rifier les logs pour plus de d√©tails.
                
                Serveur concern√©: ${env.POST_TARGET_SERVER}
                """
                
                mail to: env.POST_EMAIL_RECIPIENT,
                    subject: "${env.POST_EMAIL_SUBJECT_PREFIX} ${env.POST_TARGET_SERVER} - √âchec",
                    body: emailBody
            }
        }
        
        cleanup {
            cleanWs()
        }
    }