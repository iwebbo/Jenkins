pipeline {
    agent any
    
    environment {
        // Variables d'environnement Ansible
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'  // Optimis√© pour Raspberry Pi
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
        // Variables sp√©cifiques pour le template post
        DEPLOYMENT_TYPE = 'DOCKER'
        OPERATION_TYPE = 'DEPLOY'
    }
    
    parameters {
        choice(
            name: 'PLAYBOOK_ACTION',
            choices: ['install', 'manage'],
            description: 'Action √† effectuer sur Docker'
        )
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'Windows',
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'Linux'
            ],
            description: 'Serveur cible pour le d√©ploiement'
        )
        text(
            name: 'DOCKER_RUN_COMMAND',
            defaultValue: '',
            description: '''üê≥ Commande Docker Run (UNIQUEMENT si action = manage):
            
            EXEMPLE WINDOWS:
            docker run -p 3001:3001 --name anythingllm -ti --rm -v G:\\docker\\docker-data\\anything-llm:/app/data mintplexlabs/anythingllm:latest

            EXEMPLE LINUX:
            docker run -d -it --restart=unless-stopped -v $(pwd)/myelectricaldata/data:/data -p 5000:5000 -e TZ='Europe/Paris' m4dm4rtig4n/myelectricaldata:latest

            ‚ö†Ô∏è Ce champ sera ignor√© pour l'action "install"'''
        )
        string(
            name: 'DOCKER_IMAGE_NAME',
            defaultValue: '',
            description: 'üè∑Ô∏è Nom de l\'image Docker (ex: eclipse-mosquitto, nginx, mysql) - UNIQUEMENT pour action "manage"'
        )
        text(
            name: 'ADDITIONAL_DOCKER_VARS',
            defaultValue: '',
            description: '''‚öôÔ∏è Variables Ansible suppl√©mentaires (optionnel):
            Format: key=value s√©par√©es par des espaces ou nouvelles lignes
            Exemple: 
            container_restart_policy=unless-stopped
            network_mode=bridge
            environment_vars=TZ=Europe/Paris'''
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "üîç Validation des param√®tres Docker..."
                    echo "Action s√©lectionn√©e: ${params.PLAYBOOK_ACTION}"
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    
                    // D√©terminer le type de serveur
                    def isWindows = params.TARGET_SERVER.toLowerCase().contains('windows')
                    def serverType = isWindows ? 'Windows' : 'Linux'
                    echo "Type de serveur d√©tect√©: ${serverType}"
                    env.SERVER_TYPE = serverType
                    
                    // D√©terminer le playbook selon l'action ET le type de serveur
                    def selectedPlaybook = ""
                    if (params.PLAYBOOK_ACTION == 'install') {
                        selectedPlaybook = isWindows ? 'deploy_docker_windows.yml' : 'deploy_docker_linux.yml'
                        env.OPERATION_TYPE = 'INSTALL'
                    } else { // manage
                        selectedPlaybook = isWindows ? 'deploy_docker_container_windows.yml' : 'deploy_docker_container_linux.yml'
                        env.OPERATION_TYPE = 'MANAGE'
                    }
                    
                    // Stocker le playbook s√©lectionn√©
                    env.SELECTED_PLAYBOOK = selectedPlaybook
                    echo "Playbook s√©lectionn√©: ${env.SELECTED_PLAYBOOK}"
                    
                    // Validation pour l'action manage
                    if (params.PLAYBOOK_ACTION == 'manage') {
                        if (params.DOCKER_RUN_COMMAND.trim() == '') {
                            error("La commande Docker Run est obligatoire pour l'action 'manage'")
                        }
                        if (params.DOCKER_IMAGE_NAME.trim() == '') {
                            error("Le nom de l'image Docker est obligatoire pour l'action 'manage'")
                        }
                        
                        echo "‚úÖ Param√®tres Docker valid√©s:"
                        echo "   Image: ${params.DOCKER_IMAGE_NAME}"
                        echo "   Commande: ${params.DOCKER_RUN_COMMAND}"
                        
                        // Stocker les variables pour le post
                        env.DOCKER_IMAGE_DEPLOYED = params.DOCKER_IMAGE_NAME
                        env.DOCKER_COMMAND_USED = params.DOCKER_RUN_COMMAND
                        
                    } else {
                        echo "Action 'install' - installation de Docker Engine"
                        if (params.DOCKER_RUN_COMMAND.trim() != '' || params.DOCKER_IMAGE_NAME.trim() != '') {
                            echo "‚ö†Ô∏è Les param√®tres Docker sont ignor√©s pour l'action 'install'"
                        }
                        env.DOCKER_IMAGE_DEPLOYED = 'Docker Engine'
                        env.DOCKER_COMMAND_USED = 'Installation'
                    }
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier que le playbook existe
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "‚ùå Playbook ${env.SELECTED_PLAYBOOK} non trouv√©!"
                            echo "Contenu du r√©pertoire playbook:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "R√©pertoire non trouv√©"
                            exit 1
                        fi
                        
                        echo "‚úÖ Playbook ${env.SELECTED_PLAYBOOK} trouv√©"
                    """
                    
                    // V√©rifier la syntaxe du playbook
                    sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} -e HOST=${TARGET_SERVER}"
                }
            }
        }
        
        stage('Pr√©paration des variables Ansible') {
            when {
                expression { params.PLAYBOOK_ACTION == 'manage' }
            }
            steps {
                script {
                    echo "üîß Pr√©paration des variables Ansible pour la gestion Docker..."
                    
                    // Construire les variables Ansible
                    def ansibleVars = []
                    
                    // Variables principales Docker
                    ansibleVars << "docker_run_var=\"${params.DOCKER_RUN_COMMAND}\""
                    ansibleVars << "docker_images=\"${params.DOCKER_IMAGE_NAME}\""
                    
                    // Variables suppl√©mentaires si fournies
                    if (params.ADDITIONAL_DOCKER_VARS.trim() != '') {
                        echo "Variables suppl√©mentaires fournies:"
                        echo "${params.ADDITIONAL_DOCKER_VARS}"
                        
                        // Nettoyer et formater les variables suppl√©mentaires
                        def cleanVars = params.ADDITIONAL_DOCKER_VARS
                            .replaceAll('\n', ' ')
                            .replaceAll('\r', '')
                            .trim()
                        
                        ansibleVars << cleanVars
                    }
                    
                    // Stocker toutes les variables format√©es
                    env.ANSIBLE_EXTRA_VARS = ansibleVars.join(' ')
                    
                    echo "‚úÖ Variables Ansible pr√©par√©es:"
                    echo "${env.ANSIBLE_EXTRA_VARS}"
                }
            }
        }
        
        stage('Ex√©cution du Playbook Docker') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_PRIVATE_KEY_FILE')]) {
                        if (params.PLAYBOOK_ACTION == 'install') {
                            echo "üöÄ D√©marrage de l'installation Docker Engine..."
                            echo "Serveur: ${params.TARGET_SERVER} (${env.SERVER_TYPE})"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            
                            sh '''
                                chmod 600 $SSH_PRIVATE_KEY_FILE
                                
                                echo "Ex√©cution du playbook d'installation..."
                                
                                # Commande Ansible pour installation
                                ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER}
                            '''
                        } else {
                            echo "üê≥ D√©marrage de la gestion des conteneurs Docker..."
                            echo "Serveur: ${params.TARGET_SERVER} (${env.SERVER_TYPE})"
                            echo "Image: ${params.DOCKER_IMAGE_NAME}"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            
                            sh '''
                                chmod 600 $SSH_PRIVATE_KEY_FILE
                                
                                echo "Ex√©cution du playbook de gestion des conteneurs..."
                                echo "Variables utilis√©es: ${ANSIBLE_EXTRA_VARS}"
                                
                                # Commande Ansible pour gestion des conteneurs
                                ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER} \
                                    --extra-vars "${ANSIBLE_EXTRA_VARS}"
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // =================================================================
                // CONFIGURATION ADAPT√âE POUR DOCKER
                // =================================================================
                
                // Variables sp√©cifiques Docker
                env.POST_DEPLOYMENT_TYPE = 'DOCKER'
                env.POST_PROJECT_NAME = params.DOCKER_IMAGE_NAME ?: 'Docker Engine'
                env.POST_PROJECT_VERSION = 'Latest'
                env.POST_OPERATION_TYPE = env.OPERATION_TYPE ?: 'DEPLOY'
                env.POST_TARGET_ENVIRONMENT = params.TARGET_SERVER
                
                // Variables Docker sp√©cifiques
                env.POST_DOCKER_IMAGE = params.DOCKER_IMAGE_NAME ?: ''
                env.POST_DOCKER_TAG = 'latest'  // Par d√©faut
                env.POST_APPLICATION_URL = ''
                env.POST_DATABASE_VERSION = ''
                
                // Variables personnalis√©es Docker
                env.POST_CUSTOM_FIELD_1 = params.PLAYBOOK_ACTION.toUpperCase()  // INSTALL ou MANAGE
                env.POST_CUSTOM_FIELD_2 = env.SERVER_TYPE  // Windows ou Linux
                
                // Configuration email
                env.POST_EMAIL_RECIPIENT = 'l.kieran95@gmail.com'
                env.POST_EMAIL_SUBJECT_PREFIX = '[DOCKER JENKINS]'
                
                // Build timestamp
                env.POST_BUILD_TIMESTAMP = new Date().format('yyyy-MM-dd HH:mm:ss')
                
                // Variables pour le rapport
                def dockerAction = params.PLAYBOOK_ACTION.toUpperCase()
                def dockerImage = params.DOCKER_IMAGE_NAME ?: 'Docker Engine'
                def dockerCommand = params.DOCKER_RUN_COMMAND ?: 'Installation Only'
                
                // =================================================================
                // REPORT GENERATION SP√âCIFIQUE DOCKER
                // =================================================================
                
                echo "Docker ${dockerAction} deployment completed"
                
                def report = """
                === DOCKER ${dockerAction} DEPLOYMENT REPORT ===
                Action: ${dockerAction}
                Target Server: ${params.TARGET_SERVER} (${env.SERVER_TYPE})
                Docker Image: ${dockerImage}
                Playbook: ${env.SELECTED_PLAYBOOK}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Status: ${currentBuild.currentResult}
                Job: ${env.JOB_NAME}
                Started by: ${env.BUILD_USER ?: 'System'}
                Duration: ${currentBuild.durationString ?: 'N/A'}

                Docker Configuration:
                ${dockerAction == 'MANAGE' ? "Command: ${dockerCommand}" : "Installation: Docker Engine"}
                ${params.ADDITIONAL_DOCKER_VARS ? "Additional Vars: ${params.ADDITIONAL_DOCKER_VARS}" : "No additional variables"}

                Build URL: ${env.BUILD_URL}
                Console Logs: ${env.BUILD_URL}console
                ==========================================
                """
                
                writeFile file: "docker_${dockerAction.toLowerCase()}_deployment_report.txt", text: report
                archiveArtifacts artifacts: "docker_${dockerAction.toLowerCase()}_deployment_report.txt", allowEmptyArchive: true
            }
        }
        
        success {
            script {
                def dockerAction = params.PLAYBOOK_ACTION.toUpperCase()
                def dockerImage = params.DOCKER_IMAGE_NAME ?: 'Docker Engine'
                
                echo "${dockerAction} '${dockerImage}' completed successfully!"
                
                // Set build description
                currentBuild.description = "${dockerAction} ${dockerImage} ‚Üí ${params.TARGET_SERVER} (${env.SERVER_TYPE})"
                currentBuild.displayName = "#${env.BUILD_NUMBER} - ${dockerAction} ${dockerImage}"
                
                // Build email body
                def emailBody = """
                üê≥ DOCKER ${dockerAction} - SUCCESS

                Action: ${dockerAction}
                Target: ${params.TARGET_SERVER} (${env.SERVER_TYPE})
                Docker Image: ${dockerImage}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Job: ${env.JOB_NAME}
                Duration: ${currentBuild.durationString ?: 'N/A'}

                üìä Build details: ${env.BUILD_URL}

                Configuration Details:
                üéØ Playbook: ${env.SELECTED_PLAYBOOK}
                ${dockerAction == 'MANAGE' ? "üöÄ Command: ${params.DOCKER_RUN_COMMAND}" : "‚öôÔ∏è Installation: Docker Engine Setup"}
                ${params.ADDITIONAL_DOCKER_VARS ? "üìù Additional Variables: ${params.ADDITIONAL_DOCKER_VARS}" : ""}

                ‚úÖ The Docker ${dockerAction.toLowerCase()} operation completed successfully.
                """
                
                mail to: env.POST_EMAIL_RECIPIENT,
                    subject: "${env.POST_EMAIL_SUBJECT_PREFIX} ${dockerAction} - ${dockerImage} - Success",
                    body: emailBody
            }
        }
        
        failure {
            script {
                def dockerAction = params.PLAYBOOK_ACTION.toUpperCase()
                def dockerImage = params.DOCKER_IMAGE_NAME ?: 'Docker Engine'
                
                echo "Failed to ${dockerAction.toLowerCase()} '${dockerImage}'"
                
                // Set build description
                currentBuild.description = "${dockerAction} ${dockerImage} ‚Üí ${params.TARGET_SERVER} ‚Üí FAILED"
                currentBuild.displayName = "#${env.BUILD_NUMBER} - ${dockerAction} ${dockerImage} - FAILED"
                
                // Build failure email body
                def emailBody = """
                ‚ùå DOCKER ${dockerAction} - FAILURE

                Action: ${dockerAction}
                Target: ${params.TARGET_SERVER} (${env.SERVER_TYPE})
                Docker Image: ${dockerImage}
                Build: #${env.BUILD_NUMBER}
                Date: ${env.POST_BUILD_TIMESTAMP}
                Job: ${env.JOB_NAME}

                üîç Error logs: ${env.BUILD_URL}console

                Failed Configuration:
                üéØ Playbook: ${env.SELECTED_PLAYBOOK}
                ${dockerAction == 'MANAGE' ? "üöÄ Command: ${params.DOCKER_RUN_COMMAND}" : "‚öôÔ∏è Installation: Docker Engine Setup"}
                ${params.ADDITIONAL_DOCKER_VARS ? "üìù Additional Variables: ${params.ADDITIONAL_DOCKER_VARS}" : ""}

                Ansible Variables Generated:
                ${env.ANSIBLE_EXTRA_VARS ?: 'No variables generated'}

                ‚ö†Ô∏è Please check the logs for more details.
                """
                
                mail to: env.POST_EMAIL_RECIPIENT,
                    subject: "${env.POST_EMAIL_SUBJECT_PREFIX} ${dockerAction} - ${dockerImage} - Failure",
                    body: emailBody
            }
        }
        
        cleanup {
            cleanWs()
        }
    }
}