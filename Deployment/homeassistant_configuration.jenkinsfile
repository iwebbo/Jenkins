pipeline {
    agent any
    
    environment {
        // Variables d'environnement Ansible
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'  // Optimis√© pour Home Assistant
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
        // Variables sp√©cifiques pour le template post
        DEPLOYMENT_TYPE = 'HOME_ASSISTANT_CONFIG'
        OPERATION_TYPE = 'DEPLOY'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'HomeAssistant',
                'HomeAssistant-Test',
                'HomeAssistant-Dev'
            ],
            description: 'Instance Home Assistant cible pour le d√©ploiement'
        )
        string(
            name: 'HA_INSTANCE_IP',
            defaultValue: '192.168.1.16',
            description: '''üè† Adresse IP de l'instance Home Assistant:
            
            EXEMPLES:
            192.168.1.16 (Production)
            192.168.1.20 (Test)
            192.168.1.25 (Dev)
            
            ‚ö†Ô∏è Cette IP sera utilis√©e comme inventory_hostname'''
        )
        string(
            name: 'HA_CONFIG_PATH',
            defaultValue: '/homeassistant',
            description: '''üìÅ Chemin de configuration Home Assistant:
            
            EXEMPLES:
            /config (HA OS standard)
            /homeassistant (HA OS custom)
            /opt/homeassistant (Installation manuelle)
            
            ‚ö†Ô∏è Chemin o√π se trouvent vos fichiers YAML'''
        )
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''üîß Niveau de verbosit√© Ansible:
            
            0 = Normal (d√©faut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
        booleanParam(
            name: 'BACKUP_ENABLED',
            defaultValue: true,
            description: 'üíæ Sauvegarder les fichiers de configuration existants'
        )
        booleanParam(
            name: 'CLEANUP_BACKUPS',
            defaultValue: true,
            description: 'üßπ Nettoyer les anciens backups (garder seulement les 2 plus r√©cents)'
        )
        booleanParam(
            name: 'WAIT_AFTER_RESTART',
            defaultValue: true,
            description: '‚è±Ô∏è Attendre que Home Assistant red√©marre avant de continuer'
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "üîç Validation des param√®tres Home Assistant..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "IP Home Assistant: ${params.HA_INSTANCE_IP}"
                    echo "Chemin config: ${params.HA_CONFIG_PATH}"
                    echo "Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}"
                    
                    // D√©terminer le flag de verbosit√©
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosit√©: '${env.ANSIBLE_VERBOSE_FLAG}'"
                    
                    // D√©terminer le playbook
                    env.SELECTED_PLAYBOOK = 'playbook_homeassistant_config.yml'
                    echo "Playbook s√©lectionn√©: ${env.SELECTED_PLAYBOOK}"
                    
                    // Validation des param√®tres obligatoires
                    if (params.HA_INSTANCE_IP.trim() == '') {
                        error("L'adresse IP de Home Assistant est obligatoire")
                    }
                    if (params.HA_CONFIG_PATH.trim() == '') {
                        error("Le chemin de configuration est obligatoire")
                    }
                    
                    // Validation format IP
                    def ipPattern = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
                    if (!params.HA_INSTANCE_IP.matches(ipPattern)) {
                        error("Format d'adresse IP invalide: ${params.HA_INSTANCE_IP}")
                    }
                    
                    echo "‚úÖ Param√®tres Home Assistant valid√©s:"
                    echo "   Instance: ${params.TARGET_SERVER}"
                    echo "   IP: ${params.HA_INSTANCE_IP}"
                    echo "   Chemin config: ${params.HA_CONFIG_PATH}"
                    echo "   Sauvegarde: ${params.BACKUP_ENABLED}"
                    echo "   Cleanup: ${params.CLEANUP_BACKUPS}"
                    
                    // Stocker les variables pour le post
                    env.HA_INSTANCE_DEPLOYED = params.TARGET_SERVER
                    env.HA_IP_USED = params.HA_INSTANCE_IP
                    env.HA_CONFIG_PATH_USED = params.HA_CONFIG_PATH
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier que le playbook existe
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "‚ùå Playbook ${env.SELECTED_PLAYBOOK} non trouv√©!"
                            echo "Contenu du r√©pertoire playbook:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "R√©pertoire non trouv√©"
                            exit 1
                        fi
                        
                        echo "‚úÖ Playbook ${env.SELECTED_PLAYBOOK} trouv√©"
                    """
                    
                    // V√©rifier la syntaxe du playbook
                    sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} -e HOST=${TARGET_SERVER}"
                }
            }
        }
        
        stage('Pr√©paration des variables Ansible') {
            steps {
                script {
                    echo "üîß Pr√©paration des variables Ansible pour Home Assistant..."
                    
                    // Variables Ansible principales
                    def ansibleVars = []
                    ansibleVars << "HOST='${params.TARGET_SERVER}'"
                    ansibleVars << "inventory_hostname='${params.HA_INSTANCE_IP}'"
                    ansibleVars << "ha_config_path='${params.HA_CONFIG_PATH}'"
                    ansibleVars << "ha_backup_enabled=${params.BACKUP_ENABLED}"
                    ansibleVars << "ha_cleanup_old_backups=${params.CLEANUP_BACKUPS}"
                    ansibleVars << "ha_wait_after_restart=${params.WAIT_AFTER_RESTART}"
                    
                    // Stocker toutes les variables format√©es
                    env.ANSIBLE_EXTRA_VARS = ansibleVars.join(' ')
                    
                    echo "‚úÖ Variables Ansible pr√©par√©es:"
                    echo "   HOST: ${params.TARGET_SERVER}"
                    echo "   inventory_hostname: ${params.HA_INSTANCE_IP}"
                    echo "   ha_config_path: ${params.HA_CONFIG_PATH}"
                    echo "   Backup enabled: ${params.BACKUP_ENABLED}"
                    echo "   Cleanup backups: ${params.CLEANUP_BACKUPS}"
                    echo "Variables compl√®tes: ${env.ANSIBLE_EXTRA_VARS}"
                }
            }
        }
        
        stage('D√©ploiement Configuration Home Assistant') {
            steps {
                script {
                    withCredentials([
                        file(credentialsId: 'ssh-key-ansible-user-secret-file', variable: 'SSH_PRIVATE_KEY_FILE'),
                        string(credentialsId: 'ha-long-lived-token', variable: 'HA_TOKEN')
                    ]) {
                        echo "üè† D√©marrage du d√©ploiement Home Assistant..."
                        echo "Instance: ${params.TARGET_SERVER}"
                        echo "IP: ${params.HA_INSTANCE_IP}"
                        echo "Chemin: ${params.HA_CONFIG_PATH}"
                        echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                        echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                        
                        sh '''
                            echo "Ex√©cution du playbook Home Assistant..."
                            echo "Variables utilis√©es: ${ANSIBLE_EXTRA_VARS}"
                            echo "Flag de verbosit√©: ${ANSIBLE_VERBOSE_FLAG}"
                            echo "Token HA: ${HA_TOKEN:0:20}..."
                            
                            # Commande Ansible pour d√©ploiement Home Assistant
                            ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                -e "${ANSIBLE_EXTRA_VARS}" \
                                -e ha_long_lived_token="${HA_TOKEN}" \
                                ${ANSIBLE_VERBOSE_FLAG}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "D√©ploiement Home Assistant termin√©"
            
            // Cr√©er un rapport d√©taill√©
            script {
                def report = """
                === RAPPORT D√âPLOIEMENT HOME ASSISTANT ===
                Instance: ${params.TARGET_SERVER}
                IP Home Assistant: ${params.HA_INSTANCE_IP}
                Chemin Configuration: ${params.HA_CONFIG_PATH}
                Sauvegarde Activ√©e: ${params.BACKUP_ENABLED}
                Cleanup Backups: ${params.CLEANUP_BACKUPS}
                Attente Restart: ${params.WAIT_AFTER_RESTART}
                Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                Variables Ansible: ${env.ANSIBLE_EXTRA_VARS ?: 'Non g√©n√©r√©es'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString ?: 'N/A'}
                ==========================================
                """
                writeFile file: 'homeassistant_deployment_report.txt', text: report
                archiveArtifacts artifacts: 'homeassistant_deployment_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Configuration Home Assistant '${params.TARGET_SERVER}' d√©ploy√©e avec succ√®s!"
                
                currentBuild.description = "Home Assistant ${params.TARGET_SERVER} ‚Üí ${params.HA_INSTANCE_IP}"
                
                // Cr√©er le corps de l'email en texte avec formatage
                def emailBody = """
                    üè† HOME ASSISTANT CONFIG DEPLOYMENT - SUCC√àS

                    Instance: ${params.TARGET_SERVER}
                    IP: ${params.HA_INSTANCE_IP}
                    Chemin Config: ${params.HA_CONFIG_PATH}
                    Sauvegarde: ${params.BACKUP_ENABLED}
                    Cleanup Backups: ${params.CLEANUP_BACKUPS}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Dur√©e: ${currentBuild.durationString ?: 'N/A'}

                    üìä D√©tails du build: ${env.BUILD_URL}

                    Configuration utilis√©e:
                    - Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    - Variables Ansible: ${env.ANSIBLE_EXTRA_VARS ? 'G√©n√©r√©es' : 'Non g√©n√©r√©es'}
                    - Verbosit√©: ${params.ANSIBLE_VERBOSITY}

                    ‚úÖ Le d√©ploiement de la configuration Home Assistant s'est termin√© avec succ√®s.
                    
                    üåê Acc√®s Home Assistant: http://${params.HA_INSTANCE_IP}:8123
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Home Assistant Config - ${params.TARGET_SERVER} - Succ√®s",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "√âchec du d√©ploiement Home Assistant '${params.TARGET_SERVER}'"
                
                currentBuild.description = "Home Assistant ${params.TARGET_SERVER} ‚Üí √âCHEC"
                
                // Cr√©er le corps de l'email d'√©chec
                def emailBody = """
                    ‚ùå HOME ASSISTANT CONFIG DEPLOYMENT - √âCHEC

                    Instance: ${params.TARGET_SERVER}
                    IP: ${params.HA_INSTANCE_IP}
                    Chemin Config: ${params.HA_CONFIG_PATH}
                    Sauvegarde: ${params.BACKUP_ENABLED}
                    Cleanup Backups: ${params.CLEANUP_BACKUPS}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    üîç Logs d'erreur: ${env.BUILD_URL}console

                    Configuration utilis√©e:
                    - Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    - Verbosit√©: ${params.ANSIBLE_VERBOSITY}

                    Variables Ansible g√©n√©r√©es:
                    ${env.ANSIBLE_EXTRA_VARS ?: 'Non g√©n√©r√©es'}

                    ‚ö†Ô∏è Veuillez v√©rifier les logs pour plus de d√©tails.
                    
                    üåê Home Assistant: http://${params.HA_INSTANCE_IP}:8123
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Home Assistant Config - √âchec - ${params.TARGET_SERVER}",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}