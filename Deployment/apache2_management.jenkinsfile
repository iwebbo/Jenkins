pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'ReverseProxy',
                'Linux',
                'ServerVM1', 
                'RaspberryPi2',
                'all-linux',
                'debian-servers',
                'redhat-servers'
            ],
            description: 'Serveur cible pour la gestion Apache2'
        )
        choice(
            name: 'ACTION_APACHE',
            choices: [
                'start',
                'stop',
                'restart',
                'reload',
                'graceful',
                'status'
            ],
            description: 'Action à effectuer sur Apache2'
        )

        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''Niveau de verbosité Ansible:
            
            0 = Normal (défaut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
        text(
            name: 'EXTRA_VARS',
            defaultValue: '',
            description: 'Variables Ansible supplémentaires (format: key=value séparées par espaces)'
        )
    }
    
    stages {
        stage('Validation des paramètres') {
            steps {
                script {
                    echo "Validation des paramètres Apache2 Management..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Action Apache: ${params.ACTION_APACHE}"
                    echo "Verbosité Ansible: ${params.ANSIBLE_VERBOSITY}"
                    
                    // Déterminer le flag de verbosité
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosité: '${env.ANSIBLE_VERBOSE_FLAG}'"
                    
                    // Configuration des variables d'environnement
                    env.OPERATION_TYPE = 'MANAGE_APACHE'
                    env.SELECTED_PLAYBOOK = 'apache2_management.yml'
                    
                    echo "Paramètres validés:"
                    echo "   Action: ${params.ACTION_APACHE}"
                    echo "   Serveur cible: ${params.TARGET_SERVER}"
                    echo "   Playbook: ${env.SELECTED_PLAYBOOK}"
                }
            }
        }
        
        stage('Vérification Ansible') {
            steps {
                script {
                    // Vérifier qu'Ansible est installé
                    sh 'ansible --version'
                    
                    // Vérifier que le playbook existe
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "Playbook ${env.SELECTED_PLAYBOOK} non trouvé!"
                            echo "Contenu du répertoire playbook:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "Répertoire non trouvé"
                            exit 1
                        fi
                        
                        echo "Playbook ${env.SELECTED_PLAYBOOK} trouvé"
                    """
                    
                    // Vérifier la syntaxe du playbook
                    sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} -e HOST=${TARGET_SERVER}"
                }
            }
        }
        
        stage('Préparation des variables Ansible') {
            steps {
                script {
                    echo "Préparation des variables Ansible pour Apache2 Management..."
                    
                    // Variables Ansible principales
                    def ansibleVars = []
                    ansibleVars << "HOST='${params.TARGET_SERVER}'"
                    ansibleVars << "action_apache='${params.ACTION_APACHE}'"
                    
                    // Variables supplémentaires
                    if (params.EXTRA_VARS.trim() != '') {
                        ansibleVars << params.EXTRA_VARS.trim()
                    }
                    
                    // Stocker toutes les variables formatées
                    env.ANSIBLE_EXTRA_VARS = ansibleVars.join(' ')
                    
                    echo "Variables Ansible préparées:"
                    echo "   Action: ${params.ACTION_APACHE}"
                    echo "Variables complètes: ${env.ANSIBLE_EXTRA_VARS}"
                }
            }
        }
        
        stage('Gestion Apache2') {
            steps {
                script {
                   withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) { 
                        sh '''
                            ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                -e ansible_ssh_private_key_file="${SSH_KEY_FILE}" \
                                /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                -e "${ANSIBLE_EXTRA_VARS}" \
                                ${ANSIBLE_VERBOSE_FLAG}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Gestion Apache2 terminée"
            
            // Créer un rapport détaillé
            script {
                def report = """
                === RAPPORT APACHE2 MANAGEMENT ===
                Action: ${params.ACTION_APACHE}
                Serveur cible: ${params.TARGET_SERVER}
                Verbosité Ansible: ${params.ANSIBLE_VERBOSITY}
                Variables extra: ${params.EXTRA_VARS ?: 'Aucune'}
                Variables Ansible: ${env.ANSIBLE_EXTRA_VARS ?: 'Non générées'}
                Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non défini'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Durée: ${currentBuild.durationString ?: 'N/A'}
                ====================================
                """
                writeFile file: 'apache2_management_report.txt', text: report
                archiveArtifacts artifacts: 'apache2_management_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Gestion Apache2 réussie! Action '${params.ACTION_APACHE}' sur ${params.TARGET_SERVER}"
                
                currentBuild.description = "Apache2 ${params.ACTION_APACHE} → ${params.TARGET_SERVER}"
                
                // Créer le corps de l'email de succès
                def emailBody = """
                    APACHE2 MANAGEMENT - SUCCÈS

                    Action: ${params.ACTION_APACHE}
                    Serveur cible: ${params.TARGET_SERVER}
                    Verbosité Ansible: ${params.ANSIBLE_VERBOSITY}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Durée: ${currentBuild.durationString ?: 'N/A'}

                    Détails du build: ${env.BUILD_URL}

                    Configuration utilisée:
                    - Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non défini'}
                    - Variables Ansible: ${env.ANSIBLE_EXTRA_VARS ? 'Générées' : 'Non générées'}

                    L'action '${params.ACTION_APACHE}' a été exécutée avec succès sur Apache2.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Apache2 Management - ${params.ACTION_APACHE} sur ${params.TARGET_SERVER} - Succès",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "Échec de la gestion Apache2 - Action '${params.ACTION_APACHE}' sur ${params.TARGET_SERVER}"
                
                currentBuild.description = "Apache2 ${params.ACTION_APACHE} → ÉCHEC"
                
                // Créer le corps de l'email d'échec
                def emailBody = """
                    APACHE2 MANAGEMENT - ÉCHEC

                    Action: ${params.ACTION_APACHE}
                    Serveur cible: ${params.TARGET_SERVER}
                    Verbosité Ansible: ${params.ANSIBLE_VERBOSITY}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    Logs d'erreur: ${env.BUILD_URL}console

                    Configuration utilisée:
                    - Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non défini'}
                    - Variables extra: ${params.EXTRA_VARS ?: 'Aucune'}

                    Variables Ansible générées:
                    ${env.ANSIBLE_EXTRA_VARS ?: 'Non générées'}

                    Veuillez vérifier les logs pour plus de détails.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Apache2 Management - Échec - ${params.ACTION_APACHE} sur ${params.TARGET_SERVER}",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}