pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'ReverseProxy',
                'Linux',
                'ServerVM1', 
                'RaspberryPi2',
                'all-linux',
                'debian-servers',
                'redhat-servers'
            ],
            description: 'Target server for Apache2 reverse proxy deployment'
        )
        string(
            name: 'SERVER_NAME',
            defaultValue: 'reverseproxy.local',
            description: 'Server name for SSL certificate and virtual host (e.g.: reverseproxy.local, myapp.domain.com)'
        )
        string(
            name: 'PROXY_PASS',
            defaultValue: 'http://192.168.1.16:8123/',
            description: 'Backend server URL to proxy requests to (e.g.: http://192.168.1.100:8080/)'
        )
        string(
            name: 'HTTP_PORT',
            defaultValue: '8080',
            description: 'HTTP port for reverse proxy (default: 8080)'
        )
        string(
            name: 'HTTPS_PORT',
            defaultValue: '4443',
            description: 'HTTPS port for reverse proxy (default: 4443)'
        )
        string(
            name: 'SSL_CERT_FILE',
            defaultValue: '/etc/apache2/certificates/reverseproxy.local.crt',
            description: 'Path to SSL certificate file on target server'
        )
        string(
            name: 'SSL_CERT_KEY_FILE',
            defaultValue: '/etc/apache2/certificates/reverseproxy.local.key',
            description: 'Path to SSL private key file on target server'
        )
        string(
            name: 'SSL_CERT_CA_FILE',
            defaultValue: '/etc/apache2/certificates/myCA.crt',
            description: 'Path to SSL CA certificate file on target server'
        )
        booleanParam(
            name: 'ENABLE_SSL',
            defaultValue: true,
            description: 'Enable SSL/HTTPS configuration (requires valid certificates)'
        )
        booleanParam(
            name: 'UPDATE_CACHE',
            defaultValue: true,
            description: 'Update package cache before Apache2 installation (recommended)'
        )
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''üîß Niveau de verbosit√© Ansible:
            
            0 = Normal (d√©faut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
        text(
            name: 'EXTRA_VARS',
            defaultValue: '',
            description: 'Additional Ansible variables (format: key=value separated by spaces)'
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "üîç Validation des param√®tres Apache2 Reverse Proxy..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Nom du serveur: ${params.SERVER_NAME}"
                    echo "Backend URL: ${params.PROXY_PASS}"
                    echo "Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}"
                    
                    // D√©terminer le flag de verbosit√©
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosit√©: '${env.ANSIBLE_VERBOSE_FLAG}'"
                    
                    // Validation des param√®tres obligatoires
                    if (params.SERVER_NAME.trim() == '') {
                        error("Le nom du serveur est obligatoire!")
                    }
                    
                    if (params.PROXY_PASS.trim() == '') {
                        error("L'URL du backend est obligatoire!")
                    }
                    
                    // Validation du format URL
                    if (!params.PROXY_PASS.startsWith('http://') && !params.PROXY_PASS.startsWith('https://')) {
                        error("L'URL du backend doit commencer par http:// ou https://")
                    }
                    
                    // Validation SSL
                    if (params.ENABLE_SSL) {
                        if (params.SSL_CERT_FILE.trim() == '' || params.SSL_CERT_KEY_FILE.trim() == '') {
                            error("Les fichiers de certificat SSL sont obligatoires quand SSL est activ√©!")
                        }
                    }
                    
                    // Configuration des variables d'environnement
                    env.OPERATION_TYPE = 'CONFIGURE'
                    env.SELECTED_PLAYBOOK = 'deploy_apache_reverseproxy.yml'
                    
                    echo "‚úÖ Param√®tres valid√©s:"
                    echo "   Nom du serveur: ${params.SERVER_NAME}"
                    echo "   Backend URL: ${params.PROXY_PASS}"
                    echo "   Port HTTP: ${params.HTTP_PORT}"
                    echo "   Port HTTPS: ${params.HTTPS_PORT}"
                    echo "   SSL activ√©: ${params.ENABLE_SSL}"
                    echo "   Playbook: ${env.SELECTED_PLAYBOOK}"
                    
                    if (params.ENABLE_SSL) {
                        echo "   Certificat SSL: ${params.SSL_CERT_FILE}"
                        echo "   Cl√© SSL: ${params.SSL_CERT_KEY_FILE}"
                        echo "   CA SSL: ${params.SSL_CERT_CA_FILE}"
                    }
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier que le playbook existe
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "‚ùå Playbook ${env.SELECTED_PLAYBOOK} non trouv√©!"
                            echo "Contenu du r√©pertoire playbook:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "R√©pertoire non trouv√©"
                            exit 1
                        fi
                        
                        echo "‚úÖ Playbook ${env.SELECTED_PLAYBOOK} trouv√©"
                    """
                    
                    // V√©rifier la syntaxe du playbook
                    sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} -e HOST=${TARGET_SERVER}"
                }
            }
        }
        
        stage('Pr√©paration des variables Ansible') {
            steps {
                script {
                    echo "üîß Pr√©paration des variables Ansible pour Apache2 Reverse Proxy..."
                    
                    // Variables Ansible principales
                    def ansibleVars = []
                    ansibleVars << "host='${params.TARGET_SERVER}'"
                    ansibleVars << "server_name='${params.SERVER_NAME}'"
                    ansibleVars << "proxy_pass='${params.PROXY_PASS}'"
                    ansibleVars << "update_cache=${params.UPDATE_CACHE}"
                    
                    // Ports personnalis√©s
                    if (params.HTTP_PORT != '8080') {
                        ansibleVars << "http_port=${params.HTTP_PORT}"
                    }
                    
                    if (params.HTTPS_PORT != '4443') {
                        ansibleVars << "https_port=${params.HTTPS_PORT}"
                    }
                    
                    // Configuration SSL
                    if (params.ENABLE_SSL) {
                        ansibleVars << "enable_ssl=true"
                        ansibleVars << "ssl_cert_file='${params.SSL_CERT_FILE}'"
                        ansibleVars << "ssl_cert_key_file='${params.SSL_CERT_KEY_FILE}'"
                        ansibleVars << "ssl_cert_CA_file='${params.SSL_CERT_CA_FILE}'"
                    } else {
                        ansibleVars << "enable_ssl=false"
                    }
                    
                    // Variables suppl√©mentaires
                    if (params.EXTRA_VARS.trim() != '') {
                        ansibleVars << params.EXTRA_VARS.trim()
                    }
                    
                    // Stocker toutes les variables format√©es
                    env.ANSIBLE_EXTRA_VARS = ansibleVars.join(' ')
                    
                    echo "‚úÖ Variables Ansible pr√©par√©es:"
                    echo "   Serveur: ${params.SERVER_NAME}"
                    echo "   Backend: ${params.PROXY_PASS}"
                    echo "   SSL: ${params.ENABLE_SSL}"
                    echo "Variables compl√®tes: ${env.ANSIBLE_EXTRA_VARS}"
                }
            }
        }
        
        stage('Configuration Apache2 Reverse Proxy') {
            steps {
                script {
                   withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
                        echo "üöÄ D√©marrage de la configuration Apache2 Reverse Proxy..."
                        echo "Nom du serveur: ${params.SERVER_NAME}"
                        echo "Backend URL: ${params.PROXY_PASS}"
                        echo "Serveur cible: ${params.TARGET_SERVER}"
                        echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                        echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                        
                        sh '''
                            echo "Ex√©cution du playbook Apache2 Reverse Proxy..."
                            echo "Variables utilis√©es: ${ANSIBLE_EXTRA_VARS}"
                            echo "Flag de verbosit√©: ${ANSIBLE_VERBOSE_FLAG}"
                            
                            # Commande Ansible pour configuration Apache2 Reverse Proxy
                            ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                -e  ansible_ssh_private_key_file="${SSH_KEY_FILE}" \
                                /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                -e "${ANSIBLE_EXTRA_VARS}" \
                                ${ANSIBLE_VERBOSE_FLAG}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Configuration Apache2 Reverse Proxy termin√©e"
            
            // Cr√©er un rapport d√©taill√©
            script {
                def report = """
                === RAPPORT APACHE2 REVERSE PROXY ===
                Nom du serveur: ${params.SERVER_NAME}
                Backend URL: ${params.PROXY_PASS}
                Port HTTP: ${params.HTTP_PORT}
                Port HTTPS: ${params.HTTPS_PORT}
                SSL activ√©: ${params.ENABLE_SSL}
                Serveur cible: ${params.TARGET_SERVER}
                Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                Mise √† jour cache: ${params.UPDATE_CACHE}
                Variables extra: ${params.EXTRA_VARS ?: 'Aucune'}
                Variables Ansible: ${env.ANSIBLE_EXTRA_VARS ?: 'Non g√©n√©r√©es'}
                Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString ?: 'N/A'}
                ==========================================
                """
                writeFile file: 'apache2_reverse_proxy_report.txt', text: report
                archiveArtifacts artifacts: 'apache2_reverse_proxy_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Configuration Apache2 Reverse Proxy '${params.SERVER_NAME}' r√©ussie!"
                
                currentBuild.description = "Apache2 Reverse Proxy ${params.SERVER_NAME} ‚Üí ${params.TARGET_SERVER}"
                
                // Cr√©er le corps de l'email en texte avec formatage
                def emailBody = """
                    üîß APACHE2 REVERSE PROXY - SUCC√àS

                    Nom du serveur: ${params.SERVER_NAME}
                    Backend URL: ${params.PROXY_PASS}
                    Port HTTP: ${params.HTTP_PORT}
                    Port HTTPS: ${params.HTTPS_PORT}
                    SSL activ√©: ${params.ENABLE_SSL}
                    Serveur cible: ${params.TARGET_SERVER}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Dur√©e: ${currentBuild.durationString ?: 'N/A'}

                    üìä D√©tails du build: ${env.BUILD_URL}

                    Configuration utilis√©e:
                    - Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    - Variables Ansible: ${env.ANSIBLE_EXTRA_VARS ? 'G√©n√©r√©es' : 'Non g√©n√©r√©es'}
                    - Mise √† jour cache: ${params.UPDATE_CACHE}

                    ${params.ENABLE_SSL ? """
                    Configuration SSL:
                    - Certificat: ${params.SSL_CERT_FILE}
                    - Cl√© priv√©e: ${params.SSL_CERT_KEY_FILE}
                    - CA: ${params.SSL_CERT_CA_FILE}
                    """ : 'SSL: D√©sactiv√©'}

                    ‚úÖ Apache2 Reverse Proxy est configur√© et pr√™t √† servir les requ√™tes.

                    URLs d'acc√®s:
                    - HTTP: http://${params.SERVER_NAME}:${params.HTTP_PORT}
                    ${params.ENABLE_SSL ? "- HTTPS: https://${params.SERVER_NAME}:${params.HTTPS_PORT}" : ''}
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Apache2 Reverse Proxy - ${params.SERVER_NAME} - Succ√®s",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "√âchec de la configuration Apache2 Reverse Proxy '${params.SERVER_NAME}'"
                
                currentBuild.description = "Apache2 Reverse Proxy ${params.SERVER_NAME} ‚Üí √âCHEC"
                
                // Cr√©er le corps de l'email d'√©chec
                def emailBody = """
                    ‚ùå APACHE2 REVERSE PROXY - √âCHEC

                    Nom du serveur: ${params.SERVER_NAME}
                    Backend URL: ${params.PROXY_PASS}
                    Port HTTP: ${params.HTTP_PORT}
                    Port HTTPS: ${params.HTTPS_PORT}
                    SSL activ√©: ${params.ENABLE_SSL}
                    Serveur cible: ${params.TARGET_SERVER}
                    Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    üîç Logs d'erreur: ${env.BUILD_URL}console

                    Configuration utilis√©e:
                    - Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    - Mise √† jour cache: ${params.UPDATE_CACHE}
                    - Variables extra: ${params.EXTRA_VARS ?: 'Aucune'}

                    Variables Ansible g√©n√©r√©es:
                    ${env.ANSIBLE_EXTRA_VARS ?: 'Non g√©n√©r√©es'}

                    ‚ö†Ô∏è Veuillez v√©rifier les logs pour plus de d√©tails.
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Apache2 Reverse Proxy - √âchec - ${params.SERVER_NAME}",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}