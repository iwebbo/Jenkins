pipeline {
    agent any
    
    environment {
        // Variables d'environnement Ansible
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'  // Optimis√© pour Raspberry Pi
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
        ANSIBLE_INVENTORY_PATH = '/tmp/ansibleJenkins/ansible/inventory/hosts.ini'
        // Variables sp√©cifiques pour le template post
        DEPLOYMENT_TYPE = 'DOCKER_INSTALLATION'
        OPERATION_TYPE = 'INSTALL'
    }
    
    parameters {
        // Param√®tre dynamique avec Active Choices Plugin
        // Alternative 1: Si vous avez Active Choices Plugin install√©
        /*
        activeChoice(
            choiceType: 'PT_SINGLE_SELECT',
            filterLength: 1,
            filterable: false,
            name: 'TARGET_SERVER',
            script: [
                $class: 'GroovyScript',
                script: [
                    classpath: [],
                    sandbox: false,
                    script: '''
                        def inventoryPath = "/tmp/ansibleJenkins/ansible/inventory/hosts.ini"
                        def file = new File(inventoryPath)
                        if (!file.exists()) {
                            return ["ERROR: Inventory file not found at ${inventoryPath}"]
                        }
                        
                        def groups = []
                        file.eachLine { line ->
                            line = line.trim()
                            if (line.startsWith('[') && line.endsWith(']')) {
                                def groupName = line[1..-2]
                                if (!groupName.contains(':children')) {
                                    groups.add(groupName)
                                }
                            }
                        }
                        return groups.sort()
                    '''
                ]
            ],
            description: 'Serveur cible pour l\'installation Docker (charg√© dynamiquement depuis l\'inventaire Ansible)'
        )
        */
        
        // Alternative 2: Param√®tre string pour saisie manuelle avec validation
        string(
            name: 'TARGET_SERVER',
            defaultValue: '',
            description: '''üéØ Nom du serveur cible (sera valid√© contre l'inventaire Ansible):
            
            Serveurs disponibles dans votre inventaire:
            - ReverseProxy (192.168.1.2)
            - Windows (192.168.1.37) 
            - HomeAssistant (192.168.1.16)
            - RaspberryPi2 (127.0.0.1)
            - ServerVM1 (192.168.1.17)
            
            ‚ö†Ô∏è Saisissez exactement le nom du groupe comme dans l'inventaire'''
        )
        
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''üîß Niveau de verbosit√© Ansible:
            
            0 = Normal (d√©faut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
    }
    
    stages {
        stage('Affichage inventaire d√©tect√©') {
            steps {
                script {
                    echo "üìã Inventaire Ansible d√©tect√© automatiquement:"
                    echo "Fichier: ${env.ANSIBLE_INVENTORY_PATH}"
                    
                    // Lire et afficher le contenu de l'inventaire
                    def inventoryContent = readFile("${env.ANSIBLE_INVENTORY_PATH}")
                    echo "Contenu de l'inventaire:"
                    echo inventoryContent
                    
                    // Parser et afficher les groupes disponibles
                    def availableGroups = getAnsibleGroups()
                    echo "Groupes disponibles d√©tect√©s: ${availableGroups.join(', ')}"
                    echo "Serveur s√©lectionn√©: ${params.TARGET_SERVER}"
                }
            }
        }
        
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "üîç Validation des param√®tres d'installation Docker..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}"
                    
                    // V√©rifier que le groupe s√©lectionn√© existe dans l'inventaire
                    def availableGroups = getAnsibleGroups()
                    if (!availableGroups.contains(params.TARGET_SERVER)) {
                        error("Le serveur '${params.TARGET_SERVER}' n'existe pas dans l'inventaire Ansible!")
                    }
                    
                    // D√©terminer le flag de verbosit√©
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosit√©: '${env.ANSIBLE_VERBOSE_FLAG}'"
                    
                    // D√©terminer le type de serveur et l'adresse IP
                    def serverInfo = getServerInfo(params.TARGET_SERVER)
                    env.SERVER_TYPE = serverInfo.type
                    env.SERVER_IP = serverInfo.ip
                    
                    echo "Type de serveur d√©tect√©: ${env.SERVER_TYPE}"
                    echo "Adresse IP du serveur: ${env.SERVER_IP}"
                    
                    // D√©terminer le playbook selon le type de serveur
                    def selectedPlaybook = (env.SERVER_TYPE == 'Windows') ? 'install_docker_windows.yml' : 'install_docker_linux.yml'
                    env.SELECTED_PLAYBOOK = selectedPlaybook
                    echo "Playbook s√©lectionn√©: ${env.SELECTED_PLAYBOOK}"
                    
                    // Stocker les variables pour le post
                    env.DOCKER_INSTALLATION_TARGET = params.TARGET_SERVER
                }
            }
        }
        
        stage('V√©rification connectivit√© serveur') {
            steps {
                script {
                    echo "üîó Test de connectivit√© vers ${params.TARGET_SERVER} (${env.SERVER_IP})..."
                    
                    // Tester la connectivit√© avec Ansible
                    def isLinux = env.SELECTED_PLAYBOOK.contains('_linux.yml')
                    def isWindows = env.SELECTED_PLAYBOOK.contains('_windows.yml')

                    if (isLinux) {
                        withCredentials([
                            sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')
                        ]) {
                            sh """
                                echo "Test de connectivit√© SSH vers ${env.SERVER_IP}..."
                                ansible ${params.TARGET_SERVER} -i ${env.ANSIBLE_INVENTORY_PATH} \
                                    -e ansible_ssh_private_key_file="\${SSH_KEY_FILE}" \
                                    -m ping ${env.ANSIBLE_VERBOSE_FLAG}
                            """
                        }
                    }
                    
                    if (isWindows) {
                        withCredentials([
                            usernamePassword(credentialsId: 'credentials-id-windows-user-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')
                        ]) {
                            sh """
                                echo "Test de connectivit√© WinRM vers ${env.SERVER_IP}..."
                                ansible ${params.TARGET_SERVER} -i ${env.ANSIBLE_INVENTORY_PATH} \
                                    -e ansible_user="\${USERNAME}" \
                                    -e ansible_password="\${PASSWORD}" \
                                    -m win_ping ${env.ANSIBLE_VERBOSE_FLAG}
                            """
                        }
                    }
                    
                    echo "‚úÖ Connectivit√© OK vers ${params.TARGET_SERVER}"
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier que le playbook existe
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "‚ùå Playbook ${env.SELECTED_PLAYBOOK} non trouv√©!"
                            echo "Contenu du r√©pertoire playbook:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "R√©pertoire non trouv√©"
                            exit 1
                        fi
                        
                        echo "‚úÖ Playbook ${env.SELECTED_PLAYBOOK} trouv√©"
                    """
                    
                    // V√©rifier la syntaxe du playbook
                    sh "ansible-playbook --syntax-check -i ${env.ANSIBLE_INVENTORY_PATH} /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} -e HOST=${TARGET_SERVER}"
                }
            }
        }
        
        stage('Installation Docker') {
            steps {
                script {
                    def isLinux = env.SELECTED_PLAYBOOK.contains('_linux.yml')
                    def isWindows = env.SELECTED_PLAYBOOK.contains('_windows.yml')

                    if (isLinux) {
                        withCredentials([
                            sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')
                        ]) {
                            echo "üê≥ D√©marrage de l'installation Docker sur Linux..."
                            echo "Serveur: ${params.TARGET_SERVER} (${env.SERVER_IP}) - ${env.SERVER_TYPE}"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                            
                            sh '''
                                echo "Ex√©cution du playbook d'installation Docker..."
                                echo "Aucune variable sp√©cifique - Installation standard"
                                echo "Flag de verbosit√©: ${ANSIBLE_VERBOSE_FLAG}"
                                
                                # Commande Ansible simple pour installation Docker
                                ansible-playbook -i ${ANSIBLE_INVENTORY_PATH} \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER} \
                                    -e ansible_ssh_private_key_file="${SSH_KEY_FILE}" \
                                    ${ANSIBLE_VERBOSE_FLAG}
                            '''
                        }
                    }
                    
                    if (isWindows) {
                        withCredentials([
                            usernamePassword(credentialsId: 'credentials-id-windows-user-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')
                        ]) {
                            echo "üê≥ D√©marrage de l'installation Docker sur Windows..."
                            echo "Serveur: ${params.TARGET_SERVER} (${env.SERVER_IP}) - ${env.SERVER_TYPE}"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                            
                            sh '''
                                echo "Ex√©cution du playbook d'installation Docker..."
                                echo "Aucune variable sp√©cifique - Installation standard"
                                echo "Flag de verbosit√©: ${ANSIBLE_VERBOSE_FLAG}"
                                
                                # Commande Ansible simple pour installation Docker
                                ansible-playbook -i ${ANSIBLE_INVENTORY_PATH} \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER} \
                                    -e ansible_user="${USERNAME}" \
                                    -e ansible_password="${PASSWORD}" \
                                    ${ANSIBLE_VERBOSE_FLAG}
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Installation Docker termin√©e"
            
            // Cr√©er un rapport d√©taill√© avec informations dynamiques
            script {
                def report = """
                === RAPPORT INSTALLATION DOCKER (INVENTAIRE DYNAMIQUE) ===
                Serveur Cible: ${params.TARGET_SERVER}
                Adresse IP: ${env.SERVER_IP ?: 'Non d√©tect√©e'}
                Type Serveur: ${env.SERVER_TYPE ?: 'Non d√©fini'}
                Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                Inventaire: ${env.ANSIBLE_INVENTORY_PATH}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString ?: 'N/A'}
                
                Groupes disponibles dans l'inventaire:
                ${getAnsibleGroups().join(', ')}
                ==========================================================
                """
                writeFile file: 'docker_installation_report.txt', text: report
                archiveArtifacts artifacts: 'docker_installation_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Installation Docker sur '${params.TARGET_SERVER}' (${env.SERVER_IP}) r√©ussie!"
                
                currentBuild.description = "Docker install√© ‚Üí ${params.TARGET_SERVER} (${env.SERVER_IP})"
                
                // Email de succ√®s avec informations dynamiques
                def emailBody = """
                    üê≥ INSTALLATION DOCKER - SUCC√àS

                    Serveur: ${params.TARGET_SERVER}
                    Adresse IP: ${env.SERVER_IP ?: 'Non d√©tect√©e'}
                    Type Serveur: ${env.SERVER_TYPE ?: 'Non d√©fini'}
                    Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Dur√©e: ${currentBuild.durationString ?: 'N/A'}

                    üìä D√©tails du build: ${env.BUILD_URL}

                    Configuration d√©tect√©e automatiquement:
                    - Inventaire: ${env.ANSIBLE_INVENTORY_PATH}
                    - Groupes disponibles: ${getAnsibleGroups().join(', ')}
                    - Connectivit√©: Test√©e avec succ√®s

                    ‚úÖ L'installation Docker s'est termin√©e avec succ√®s.
                    
                    Prochaines √©tapes:
                    - Docker est maintenant install√© sur ${params.TARGET_SERVER} (${env.SERVER_IP})
                    - Vous pouvez tester avec: docker --version
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Installation Docker - ${params.TARGET_SERVER} - Succ√®s",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "√âchec de l'installation Docker sur '${params.TARGET_SERVER}' (${env.SERVER_IP})"
                
                currentBuild.description = "Installation Docker ‚Üí √âCHEC sur ${params.TARGET_SERVER} (${env.SERVER_IP})"
                
                // Email d'√©chec avec informations de diagnostic
                def emailBody = """
                    ‚ùå INSTALLATION DOCKER - √âCHEC

                    Serveur: ${params.TARGET_SERVER}
                    Adresse IP: ${env.SERVER_IP ?: 'Non d√©tect√©e'}
                    Type Serveur: ${env.SERVER_TYPE ?: 'Non d√©fini'}
                    Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    üîç Logs d'erreur: ${env.BUILD_URL}console

                    Diagnostic automatique:
                    - Inventaire: ${env.ANSIBLE_INVENTORY_PATH}
                    - Groupes d√©tect√©s: ${getAnsibleGroups().join(', ')}

                    ‚ö†Ô∏è Veuillez v√©rifier les logs pour plus de d√©tails.
                    
                    Actions recommand√©es:
                    - V√©rifier la connectivit√© au serveur ${params.TARGET_SERVER} (${env.SERVER_IP})
                    - Contr√¥ler les permissions d'installation
                    - Examiner les pr√©requis syst√®me
                    - V√©rifier que l'inventaire Ansible est √† jour
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Installation Docker - √âchec - ${params.TARGET_SERVER}",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}

// ===============================================
// FONCTIONS UTILITAIRES POUR INVENTAIRE DYNAMIQUE
// ===============================================

/**
 * Parse le fichier d'inventaire Ansible et retourne la liste des groupes
 * DOIT √™tre appel√© dans un contexte Jenkins (node/stage)
 */
def getAnsibleGroups() {
    def inventoryPath = '/tmp/ansibleJenkins/ansible/inventory/hosts.ini'
    
    // V√©rifier que le fichier existe
    if (!fileExists(inventoryPath)) {
        error("‚ùå Fichier d'inventaire Ansible non trouv√© √†: ${inventoryPath}")
    }
    
    def inventoryContent = readFile(inventoryPath)
    def groups = []
    
    // Parser le contenu ligne par ligne
    inventoryContent.split('\n').each { line ->
        line = line.trim()
        
        // D√©tecter les groupes [nom_groupe]
        if (line.startsWith('[') && line.endsWith(']')) {
            def groupName = line[1..-2] // Enlever les crochets
            
            // Exclure les m√©ta-groupes (avec :children)
            if (!groupName.contains(':children')) {
                groups.add(groupName)
            }
        }
    }
    
    // Trier alphab√©tiquement
    groups = groups.sort()
    
    echo "üìã Groupes d√©tect√©s dans l'inventaire: ${groups.join(', ')}"
    return groups
}

/**
 * Retourne les informations d'un serveur (type et IP) √† partir de l'inventaire
 * DOIT √™tre appel√© dans un contexte Jenkins (node/stage)
 */
def getServerInfo(String serverName) {
    def inventoryPath = '/tmp/ansibleJenkins/ansible/inventory/hosts.ini'
    
    if (!fileExists(inventoryPath)) {
        error("‚ùå Fichier d'inventaire Ansible non trouv√© √†: ${inventoryPath}")
    }
    
    def inventoryContent = readFile(inventoryPath)
    def currentGroup = ''
    def serverIp = 'Unknown'
    def serverType = 'Linux' // Par d√©faut
    
    // Parser le contenu pour trouver le serveur
    inventoryContent.split('\n').each { line ->
        line = line.trim()
        
        // D√©tecter les groupes
        if (line.startsWith('[') && line.endsWith(']')) {
            currentGroup = line[1..-2] // Enlever les crochets
            
            // D√©terminer le type selon le nom du groupe
            if (currentGroup.toLowerCase().contains('windows')) {
                serverType = 'Windows'
            } else {
                serverType = 'Linux'
            }
        }
        // Si on est dans le bon groupe et qu'on trouve une IP
        else if (currentGroup == serverName && line.contains('.')) {
            // Extraire l'IP (supposant format: IP ou hostname ansible_host=IP)
            if (line.contains('ansible_host=')) {
                serverIp = line.split('ansible_host=')[1].split(' ')[0]
            } else if (line ==~ /^\d+\.\d+\.\d+\.\d+.*/) {
                serverIp = line.split(' ')[0]
            }
        }
    }
    
    return [type: serverType, ip: serverIp]
}