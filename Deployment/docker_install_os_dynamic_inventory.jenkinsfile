pipeline {
    agent any
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
        ANSIBLE_INVENTORY_PATH = '/tmp/ansibleJenkins/ansible/inventory/hosts.ini'
        DEPLOYMENT_TYPE = 'DOCKER_INSTALLATION'
        OPERATION_TYPE = 'INSTALL'
    }
    
    parameters {
        // SOLUTION 1: Active Choices Plugin - Liste déroulante dynamique
        activeChoice(
            choiceType: 'PT_SINGLE_SELECT',
            filterLength: 1,
            filterable: false,
            name: 'TARGET_SERVER',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: 'return ["ERROR: Could not load servers from inventory"]'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script: '''
                        // Chemin vers votre inventaire Ansible
                        def inventoryPath = "/tmp/ansibleJenkins/ansible/inventory/hosts.ini"
                        def file = new File(inventoryPath)
                        
                        if (!file.exists()) {
                            return ["ERROR: Inventory file not found at ${inventoryPath}"]
                        }
                        
                        def groups = []
                        def currentGroup = ""
                        
                        try {
                            file.eachLine { line ->
                                line = line.trim()
                                
                                // Détecter les groupes [nom_groupe]
                                if (line.startsWith('[') && line.endsWith(']')) {
                                    def groupName = line[1..-2] // Enlever les crochets
                                    
                                    // Exclure les méta-groupes (avec :children)
                                    if (!groupName.contains(':children') && !groupName.isEmpty()) {
                                        groups.add(groupName)
                                    }
                                }
                            }
                            
                            // Trier alphabétiquement
                            groups = groups.sort()
                            
                            if (groups.isEmpty()) {
                                return ["ERROR: No valid groups found in inventory"]
                            }
                            
                            return groups
                            
                        } catch (Exception e) {
                            return ["ERROR: Failed to parse inventory - ${e.getMessage()}"]
                        }
                    '''
                ]
            ],
            description: '''🎯 Serveur cible pour l'installation Docker
            
            Liste chargée dynamiquement depuis l'inventaire Ansible:
            /tmp/ansibleJenkins/ansible/inventory/hosts.ini
            
            Les serveurs affichés correspondent exactement aux groupes 
            définis dans votre fichier hosts.ini'''
        )
        
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: ['0', '1', '2', '3', '4'],
            description: '''🔧 Niveau de verbosité Ansible:
            0=Normal, 1=Verbose(-v), 2=Plus verbose(-vv), 3=Debug(-vvv), 4=Debug complet(-vvvv)'''
        )
    }
    
    stages {
        stage('Validation inventaire dynamique') {
            steps {
                script {
                    echo "📋 Validation du serveur sélectionné dynamiquement..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    
                    // Vérifier si c'est une erreur
                    if (params.TARGET_SERVER.startsWith('ERROR:')) {
                        error("❌ Problème avec l'inventaire dynamique: ${params.TARGET_SERVER}")
                    }
                    
                    // Afficher le contenu de l'inventaire pour debug
                    def inventoryContent = readFile("${env.ANSIBLE_INVENTORY_PATH}")
                    echo "Contenu de l'inventaire:"
                    echo inventoryContent
                    
                    // Re-parser pour validation et obtenir les infos
                    def serverInfo = getServerInfo(params.TARGET_SERVER)
                    env.SERVER_TYPE = serverInfo.type
                    env.SERVER_IP = serverInfo.ip
                    
                    echo "✅ Serveur validé: ${params.TARGET_SERVER}"
                    echo "Type: ${env.SERVER_TYPE}, IP: ${env.SERVER_IP}"
                    
                    // Sélection du playbook
                    def selectedPlaybook = (env.SERVER_TYPE == 'Windows') ? 'install_docker_windows.yml' : 'install_docker_linux.yml'
                    env.SELECTED_PLAYBOOK = selectedPlaybook
                    
                    // Verbosité
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                }
            }
        }
        
        stage('Installation Docker') {
            steps {
                script {
                    echo "🐳 Installation Docker sur ${params.TARGET_SERVER} (${env.SERVER_IP})..."
                    
                    def isLinux = env.SELECTED_PLAYBOOK.contains('_linux.yml')
                    def isWindows = env.SELECTED_PLAYBOOK.contains('_windows.yml')

                    if (isLinux) {
                        withCredentials([
                            sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')
                        ]) {
                            sh '''
                                ansible-playbook -i ${ANSIBLE_INVENTORY_PATH} \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER} \
                                    -e ansible_ssh_private_key_file="${SSH_KEY_FILE}" \
                                    ${ANSIBLE_VERBOSE_FLAG}
                            '''
                        }
                    }
                    
                    if (isWindows) {
                        withCredentials([
                            usernamePassword(credentialsId: 'credentials-id-windows-user-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')
                        ]) {
                            sh '''
                                ansible-playbook -i ${ANSIBLE_INVENTORY_PATH} \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER} \
                                    -e ansible_user="${USERNAME}" \
                                    -e ansible_password="${PASSWORD}" \
                                    ${ANSIBLE_VERBOSE_FLAG}
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                currentBuild.description = "✅ Docker installé sur ${params.TARGET_SERVER} (${env.SERVER_IP})"
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Docker installé avec succès - ${params.TARGET_SERVER}",
                    body: """
                    🐳 INSTALLATION DOCKER - SUCCÈS
                    
                    Serveur: ${params.TARGET_SERVER} (sélectionné dynamiquement)
                    IP: ${env.SERVER_IP}
                    Type: ${env.SERVER_TYPE}
                    
                    ✅ Docker est maintenant installé et prêt à l'emploi !
                    """
            }
        }
        failure {
            script {
                currentBuild.description = "❌ Échec installation Docker - ${params.TARGET_SERVER}"
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Échec installation Docker - ${params.TARGET_SERVER}",
                    body: "❌ L'installation Docker a échoué sur ${params.TARGET_SERVER}. Consultez les logs: ${env.BUILD_URL}console"
            }
        }
    }
}

/**
 * Fonction utilitaire pour récupérer les infos serveur
 */
def getServerInfo(String serverName) {
    def inventoryPath = '/tmp/ansibleJenkins/ansible/inventory/hosts.ini'
    def inventoryContent = readFile(inventoryPath)
    def currentGroup = ''
    def serverIp = 'Unknown'
    def serverType = 'Linux' // Par défaut
    
    inventoryContent.split('\n').each { line ->
        line = line.trim()
        
        if (line.startsWith('[') && line.endsWith(']')) {
            currentGroup = line[1..-2]
            serverType = currentGroup.toLowerCase().contains('windows') ? 'Windows' : 'Linux'
        }
        else if (currentGroup == serverName && line.contains('.')) {
            if (line.contains('ansible_host=')) {
                serverIp = line.split('ansible_host=')[1].split(' ')[0]
            } else if (line ==~ /^\d+\.\d+\.\d+\.\d+.*/) {
                serverIp = line.split(' ')[0]
            }
        }
    }
    
    return [type: serverType, ip: serverIp]
}