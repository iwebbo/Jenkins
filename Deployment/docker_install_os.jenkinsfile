pipeline {
    agent any
    
    environment {
        // Variables d'environnement Ansible
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'  // Optimis√© pour Raspberry Pi
        ANSIBLE_CONFIG = '/tmp/ansibleJenkins/ansible/ansible.cfg'
        // Variables sp√©cifiques pour le template post
        DEPLOYMENT_TYPE = 'DOCKER_INSTALLATION'
        OPERATION_TYPE = 'INSTALL'
    }
    
    parameters {
        choice(
            name: 'TARGET_SERVER',
            choices: [
                'Windows',
                'ServerVM1', 
                'RaspberryPi2',
                'ReverseProxy',
                'Linux'
            ],
            description: 'Serveur cible pour l\'installation Docker'
        )
        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: [
                '0',
                '1',
                '2',
                '3',
                '4'
            ],
            description: '''üîß Niveau de verbosit√© Ansible:
            
            0 = Normal (d√©faut)
            1 = Verbose (-v)
            2 = Plus verbose (-vv)
            3 = Debug (-vvv)
            4 = Debug complet (-vvvv)'''
        )
    }
    
    stages {
        stage('Validation des param√®tres') {
            steps {
                script {
                    echo "üîç Validation des param√®tres d'installation Docker..."
                    echo "Serveur cible: ${params.TARGET_SERVER}"
                    echo "Verbosit√© Ansible: ${params.ANSIBLE_VERBOSITY}"
                    
                    // D√©terminer le flag de verbosit√©
                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag
                    echo "Flag de verbosit√©: '${env.ANSIBLE_VERBOSE_FLAG}'"
                    
                    // D√©terminer le type de serveur
                    def isWindows = params.TARGET_SERVER.toLowerCase().contains('windows')
                    def serverType = isWindows ? 'Windows' : 'Linux'
                    echo "Type de serveur d√©tect√©: ${serverType}"
                    env.SERVER_TYPE = serverType
                    
                    // D√©terminer le playbook selon le type de serveur
                    def selectedPlaybook = isWindows ? 'install_docker_windows.yml' : 'install_docker_linux.yml'
                    env.SELECTED_PLAYBOOK = selectedPlaybook
                    echo "Playbook s√©lectionn√©: ${env.SELECTED_PLAYBOOK}"
                    
                    // Stocker les variables pour le post
                    env.DOCKER_INSTALLATION_TARGET = params.TARGET_SERVER
                }
            }
        }
        
        stage('V√©rification Ansible') {
            steps {
                script {
                    // V√©rifier qu'Ansible est install√©
                    sh 'ansible --version'
                    
                    // V√©rifier que le playbook existe
                    sh """
                        if [ ! -f "/tmp/ansibleJenkins/ansible/playbook/${env.SELECTED_PLAYBOOK}" ]; then
                            echo "‚ùå Playbook ${env.SELECTED_PLAYBOOK} non trouv√©!"
                            echo "Contenu du r√©pertoire playbook:"
                            ls -la /tmp/ansibleJenkins/ansible/playbook/ || echo "R√©pertoire non trouv√©"
                            exit 1
                        fi
                        
                        echo "‚úÖ Playbook ${env.SELECTED_PLAYBOOK} trouv√©"
                    """
                    
                    // V√©rifier la syntaxe du playbook
                    sh "ansible-playbook --syntax-check -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} -e HOST=${TARGET_SERVER}"
                }
            }
        }
        
        stage('Installation Docker') {
            steps {
                script {
                    def isLinux = env.SELECTED_PLAYBOOK.contains('_linux.yml')
                    def isWindows = env.SELECTED_PLAYBOOK.contains('_windows.yml')

                    if (isLinux) {
                        withCredentials([
                            sshUserPrivateKey(credentialsId: 'ssh-key-ansible-user-secret-file', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')
                        ]) {
                            echo "üê≥ D√©marrage de l'installation Docker sur Linux..."
                            echo "Serveur: ${params.TARGET_SERVER} (${env.SERVER_TYPE})"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                            
                            sh '''
                                echo "Ex√©cution du playbook d'installation Docker..."
                                echo "Aucune variable sp√©cifique - Installation standard"
                                echo "Flag de verbosit√©: ${ANSIBLE_VERBOSE_FLAG}"
                                
                                # Commande Ansible simple pour installation Docker
                                ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER} \
                                    -e ansible_ssh_private_key_file="${SSH_KEY_FILE}" \
                                    ${ANSIBLE_VERBOSE_FLAG}
                            '''
                        }
                    }
                    
                    if (isWindows) {
                        withCredentials([
                            usernamePassword(credentialsId: 'credentials-id-windows-user-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')
                        ]) {
                            echo "üê≥ D√©marrage de l'installation Docker sur Windows..."
                            echo "Serveur: ${params.TARGET_SERVER} (${env.SERVER_TYPE})"
                            echo "Playbook: ${env.SELECTED_PLAYBOOK}"
                            echo "Verbosit√©: ${params.ANSIBLE_VERBOSITY} ${env.ANSIBLE_VERBOSE_FLAG}"
                            
                            sh '''
                                echo "Ex√©cution du playbook d'installation Docker..."
                                echo "Aucune variable sp√©cifique - Installation standard"
                                echo "Flag de verbosit√©: ${ANSIBLE_VERBOSE_FLAG}"
                                
                                # Commande Ansible simple pour installation Docker
                                ansible-playbook -i /tmp/ansibleJenkins/ansible/inventory/hosts.ini \
                                    /tmp/ansibleJenkins/ansible/playbook/${SELECTED_PLAYBOOK} \
                                    -e HOST=${TARGET_SERVER} \
                                    -e ansible_user="${USERNAME}" \
                                    -e ansible_password="${PASSWORD}" \
                                    ${ANSIBLE_VERBOSE_FLAG}
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Installation Docker termin√©e"
            
            // Cr√©er un rapport simple
            script {
                def report = """
                === RAPPORT INSTALLATION DOCKER ===
                Serveur Cible: ${params.TARGET_SERVER}
                Type Serveur: ${env.SERVER_TYPE ?: 'Non d√©fini'}
                Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Statut: ${currentBuild.currentResult}
                Dur√©e: ${currentBuild.durationString ?: 'N/A'}
                =====================================
                """
                writeFile file: 'docker_installation_report.txt', text: report
                archiveArtifacts artifacts: 'docker_installation_report.txt', allowEmptyArchive: true
            }
        }
        success {
            script {
                echo "Installation Docker sur '${params.TARGET_SERVER}' r√©ussie!"
                
                currentBuild.description = "Docker install√© ‚Üí ${params.TARGET_SERVER}"
                
                // Email de succ√®s simple
                def emailBody = """
                    üê≥ INSTALLATION DOCKER - SUCC√àS

                    Serveur: ${params.TARGET_SERVER}
                    Type Serveur: ${env.SERVER_TYPE ?: 'Non d√©fini'}
                    Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                    Dur√©e: ${currentBuild.durationString ?: 'N/A'}

                    üìä D√©tails du build: ${env.BUILD_URL}

                    ‚úÖ L'installation Docker s'est termin√©e avec succ√®s.
                    
                    Prochaines √©tapes:
                    - Docker est maintenant install√© sur ${params.TARGET_SERVER}
                    - Vous pouvez tester avec: docker --version
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Installation Docker - ${params.TARGET_SERVER} - Succ√®s",
                    body: emailBody
            }
        }
        failure {
            script {
                echo "√âchec de l'installation Docker sur '${params.TARGET_SERVER}'"
                
                currentBuild.description = "Installation Docker ‚Üí √âCHEC sur ${params.TARGET_SERVER}"
                
                // Email d'√©chec
                def emailBody = """
                    ‚ùå INSTALLATION DOCKER - √âCHEC

                    Serveur: ${params.TARGET_SERVER}
                    Type Serveur: ${env.SERVER_TYPE ?: 'Non d√©fini'}
                    Playbook: ${env.SELECTED_PLAYBOOK ?: 'Non d√©fini'}
                    Build: #${env.BUILD_NUMBER}
                    Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                    üîç Logs d'erreur: ${env.BUILD_URL}console

                    ‚ö†Ô∏è Veuillez v√©rifier les logs pour plus de d√©tails.
                    
                    Actions recommand√©es:
                    - V√©rifier la connectivit√© au serveur ${params.TARGET_SERVER}
                    - Contr√¥ler les permissions d'installation
                    - Examiner les pr√©requis syst√®me
                """
                
                mail to: 'l.kieran95@gmail.com',
                    subject: "[Jenkins] Installation Docker - √âchec - ${params.TARGET_SERVER}",
                    body: emailBody
            }
        }
        cleanup {
            cleanWs()
        }
    }
}