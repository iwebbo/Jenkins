pipeline {
    agent { label 'generic-devops-agent' }  // Label générique

    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_FORKS = '2'
        ANSIBLE_CONFIG = "${WORKSPACE}/ansible.cfg"
        ANSIBLE_INVENTORY = "${WORKSPACE}/inventory/hosts.ini"
        EMAIL_RECIPIENT = 'devops-notify@example.com'  // Adresse e-mail générique
    }

    parameters {
        choice(
            name: 'TARGET_OS',
            choices: ['linux', 'windows', 'both'],
            description: 'Target operating system for ping test'
        )

        choice(
            name: 'TARGET_SERVER',
            choices: [
                'Server_A',
                'Server_B',
                'Server_C',
                'Server_D',
                'Server_E',
                'Server_F',
                'Server_G',
                'Server_H'
            ],
            description: 'Specific target server (optional)'
        )

        choice(
            name: 'ANSIBLE_VERBOSITY',
            choices: ['0', '1', '2', '3', '4'],
            description: '''Ansible verbosity level:
            0 = Normal (default)
            1 = Verbose (-v)
            2 = More verbose (-vv)
            3 = Debug (-vvv)
            4 = Full debug (-vvvv)'''
        )

        booleanParam(
            name: 'GATHER_SYSTEM_INFO',
            defaultValue: true,
            description: 'Collect system information in addition to ping'
        )
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scm
                    sh 'echo "Workspace cloned"'
                }
            }
        }

        stage('Parameter Validation') {
            steps {
                script {
                    echo "=== PIPELINE PARAMETERS ==="
                    echo "Target OS: ${params.TARGET_OS}"
                    echo "Target server: ${params.TARGET_SERVER}"
                    echo "Verbosity: ${params.ANSIBLE_VERBOSITY}"
                    echo "System info: ${params.GATHER_SYSTEM_INFO}"
                    echo "=========================="

                    def verbosityFlag = ''
                    if (params.ANSIBLE_VERBOSITY != '0') {
                        verbosityFlag = '-' + 'v' * params.ANSIBLE_VERBOSITY.toInteger()
                    }
                    env.ANSIBLE_VERBOSE_FLAG = verbosityFlag

                    if (!params.TARGET_OS || params.TARGET_OS == '') {
                        error("TARGET_OS parameter is required")
                    }

                    if (params.TARGET_OS == 'linux' || params.TARGET_OS == 'both') {
                        env.LINUX_PLAYBOOK = "${WORKSPACE}/playbook/ping_linux.yml"
                    }

                    if (params.TARGET_OS == 'windows' || params.TARGET_OS == 'both') {
                        env.WINDOWS_PLAYBOOK = "${WORKSPACE}/playbook/ping_windows.yml"
                    }

                    sh 'ansible --version'
                }
            }
        }

        stage('Ansible Playbook Verification') {
            steps {
                script {
                    echo "Verifying Ansible installation..."

                    if (params.TARGET_OS == 'linux' || params.TARGET_OS == 'both') {
                        echo "Verifying Linux playbook..."
                        sh """
                            if [ ! -f "${env.LINUX_PLAYBOOK}" ]; then
                                echo "❌ Linux playbook not found at ${env.LINUX_PLAYBOOK}!"
                                ls -la "${WORKSPACE}/playbook/" || echo "Playbook directory not found"
                                exit 1
                            fi

                            echo "✅ Linux playbook found at ${env.LINUX_PLAYBOOK}"
                            ansible-playbook --syntax-check -i ${ANSIBLE_INVENTORY} ${env.LINUX_PLAYBOOK} -e HOST=${params.TARGET_SERVER}
                        """
                    }

                    if (params.TARGET_OS == 'windows' || params.TARGET_OS == 'both') {
                        echo "Verifying Windows playbook..."
                        sh """
                            if [ ! -f "${env.WINDOWS_PLAYBOOK}" ]; then
                                echo "❌ Windows playbook not found at ${env.WINDOWS_PLAYBOOK}!"
                                ls -la "${WORKSPACE}/playbook/" || echo "Playbook directory not found"
                                exit 1
                            fi

                            echo "✅ Windows playbook found at ${env.WINDOWS_PLAYBOOK}"
                            ansible-playbook --syntax-check -i ${ANSIBLE_INVENTORY} ${env.WINDOWS_PLAYBOOK} -e HOST=${params.TARGET_SERVER}
                        """
                    }
                }
            }
        }

        stage('Linux Ping Test') {
            when {
                expression { params.TARGET_OS == 'linux' || params.TARGET_OS == 'both' }
            }
            steps {
                script {
                    echo "=== EXECUTING LINUX PING TEST ==="

                    def verboseFlag = env.ANSIBLE_VERBOSE_FLAG ?: ''
                    def limitFlag = (params.TARGET_SERVER != 'all') ? "--limit ${params.TARGET_SERVER}" : ''
                    def extraVars = params.GATHER_SYSTEM_INFO ? '-e gather_system_info=true' : '-e gather_system_info=false'

                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'ssh-key-ansible',  // ID générique
                            keyFileVariable: 'SSH_KEY_FILE',
                            usernameVariable: 'SSH_USER'
                        )
                    ]) {
                        sh """
                            ansible-playbook ${verboseFlag} \\
                                -i ${ANSIBLE_INVENTORY} \\
                                -e ansible_ssh_private_key_file="\${SSH_KEY_FILE}" \\
                                -e HOST=${params.TARGET_SERVER} \\
                                ${env.LINUX_PLAYBOOK} \\
                                ${limitFlag} \\
                                ${extraVars}
                        """
                    }
                }
            }
        }

        stage('Windows Ping Test') {
            when {
                expression { params.TARGET_OS == 'windows' || params.TARGET_OS == 'both' }
            }
            steps {
                script {
                    echo "=== EXECUTING WINDOWS PING TEST ==="

                    def verboseFlag = env.ANSIBLE_VERBOSE_FLAG ?: ''
                    def limitFlag = (params.TARGET_SERVER != 'all') ? "--limit ${params.TARGET_SERVER}" : ''
                    def extraVars = params.GATHER_SYSTEM_INFO ? '-e gather_system_info=true' : '-e gather_system_info=false'

                    withCredentials([
                        usernamePassword(
                            credentialsId: 'windows-credentials',  // ID générique
                            usernameVariable: 'USERNAME',
                            passwordVariable: 'PASSWORD'
                        )
                    ]) {
                        sh """
                            ansible-playbook ${verboseFlag} \\
                                -i ${ANSIBLE_INVENTORY} \\
                                ${env.WINDOWS_PLAYBOOK} \\
                                -e ansible_user="\${USERNAME}" \\
                                -e ansible_password="\${PASSWORD}" \\
                                -e HOST=${params.TARGET_SERVER} \\
                                ${limitFlag} \\
                                ${extraVars}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Ansible connectivity test completed"

            script {
                def report = """
                === ANSIBLE CONNECTIVITY TEST REPORT ===
                Target OS: ${params.TARGET_OS}
                Server(s): ${params.TARGET_SERVER}
                Ansible Verbosity: ${params.ANSIBLE_VERBOSITY}
                System Info: ${params.GATHER_SYSTEM_INFO}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Status: ${currentBuild.currentResult}
                ==========================================
                """
                writeFile file: 'ping_test_report.txt', text: report
                archiveArtifacts artifacts: 'ping_test_report.txt', allowEmptyArchive: true
            }
        }

        success {
            script {
                echo "✓ Connectivity test '${params.TARGET_OS}' successful on '${params.TARGET_SERVER}'"
                currentBuild.description = "✓ Ping Test ${params.TARGET_OS} → ${params.TARGET_SERVER}"

                def emailBody = """
                ✅ ANSIBLE PING TEST - SUCCESS

                Target OS: ${params.TARGET_OS}
                Server(s): ${params.TARGET_SERVER}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                Status: SUCCESS

                Build logs: ${env.BUILD_URL}
                """

                mail to: "${env.EMAIL_RECIPIENT}",
                    subject: "[Jenkins] SUCCESS - Ping Test - ${params.TARGET_OS}",
                    body: emailBody
            }
        }

        failure {
            script {
                echo "✗ Connectivity test '${params.TARGET_OS}' failed on '${params.TARGET_SERVER}'"
                currentBuild.description = "✗ Ping Test ${params.TARGET_OS} → FAILED"

                def emailBody = """
                ❌ ANSIBLE PING TEST - FAILURE

                Target OS: ${params.TARGET_OS}
                Server(s): ${params.TARGET_SERVER}
                Build: #${env.BUILD_NUMBER}
                Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}

                Logs: ${env.BUILD_URL}console
                """

                mail to: "${env.EMAIL_RECIPIENT}",
                    subject: "[Jenkins] FAILURE - Ping Test - ${params.TARGET_OS}",
                    body: emailBody
            }
        }

        cleanup {
            cleanWs()
        }
    }
}
