// Version avec Active Choices Plugin pour plus de dynamisme
@Library('your-shared-library') _

// Fonction utilitaire (peut √™tre dans une shared library)
def getEnvironmentsByEcosystem(String ecosystem) {
    def jenkinsUrl = "${env.JENKINS_URL}".toLowerCase()
    
    switch(true) {
        case jenkinsUrl.contains("${ecosystem.toLowerCase()}-dev-"):
            return ["DEV", "UAT"]
        case jenkinsUrl.contains("${ecosystem.toLowerCase()}-stg-"):
            return ["STG", "PREPROD"] 
        case jenkinsUrl.contains("${ecosystem.toLowerCase()}-prod-"):
            return ["PROD"]
        default:
            return ["DEV", "UAT", "STG", "PROD"]
    }
}

pipeline {
    agent any
    
    parameters {
        // Param√®tre pour l'√©cosyst√®me
        string(
            name: 'ECOSYSTEM',
            defaultValue: 'myapp',
            description: 'Nom de l\'√©cosyst√®me'
        )
        
        // Si tu utilises Active Choices Plugin (plus dynamique)
        /* 
        activeChoice(
            choiceType: 'PT_SINGLE_SELECT',
            description: 'S√©lectionner l\'environnement',
            filterLength: 1,
            filterable: false,
            name: 'ENVIRONMENT',
            script: '''
                def ecosystem = ECOSYSTEM ?: 'myapp'
                def jenkinsUrl = "${JENKINS_URL}".toLowerCase()
                
                if (jenkinsUrl.contains("${ecosystem.toLowerCase()}-dev-")) {
                    return ["DEV", "UAT"]
                } else if (jenkinsUrl.contains("${ecosystem.toLowerCase()}-stg-")) {
                    return ["STG", "PREPROD"]
                } else if (jenkinsUrl.contains("${ecosystem.toLowerCase()}-prod-")) {
                    return ["PROD"]
                } else {
                    return ["DEV", "UAT", "STG", "PROD"]
                }
            '''
        )
        */
        
        // Version standard choice (moins dynamique mais plus simple)
        choice(
            name: 'ENVIRONMENT',
            choices: getEnvironmentsByEcosystem(params.ECOSYSTEM ?: 'myapp'),
            description: 'Environnement de d√©ploiement'
        )
    }
    
    stages {
        stage('Validation') {
            steps {
                script {
                    echo "=== PARAM√àTRES DE BUILD ==="
                    echo "√âcosyst√®me: ${params.ECOSYSTEM}"
                    echo "Environnement: ${params.ENVIRONMENT}"
                    echo "Jenkins URL: ${env.JENKINS_URL}"
                    
                    // Validation suppl√©mentaire
                    def validEnvironments = getEnvironmentsByEcosystem(params.ECOSYSTEM)
                    if (!validEnvironments.contains(params.ENVIRONMENT)) {
                        error("Environnement ${params.ENVIRONMENT} non valide pour l'√©cosyst√®me ${params.ECOSYSTEM}")
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    echo "üöÄ D√©ploiement en cours..."
                    echo "Cible: ${params.ENVIRONMENT}"
                    echo "√âcosyst√®me: ${params.ECOSYSTEM}"
                    
                    // Logique de d√©ploiement sp√©cifique par environnement
                    switch(params.ENVIRONMENT) {
                        case 'DEV':
                            echo "D√©ploiement DEV - Tests automatiques activ√©s"
                            break
                        case 'UAT':
                            echo "D√©ploiement UAT - Tests d'acceptance"
                            break
                        case 'STG':
                            echo "D√©ploiement STAGING - Tests de performance"
                            break
                        case 'PROD':
                            echo "D√©ploiement PRODUCTION - Mode s√©curis√©"
                            break
                        default:
                            echo "Environnement non reconnu: ${params.ENVIRONMENT}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "‚úÖ D√©ploiement r√©ussi sur ${params.ENVIRONMENT}"
        }
        failure {
            echo "‚ùå √âchec du d√©ploiement sur ${params.ENVIRONMENT}"
        }
    }
}